#pragma once

/*******************************************************************************
**** Includes
*******************************************************************************/

#include "celib/stringid_types.h"
#include "celib/memory/memory.h"
#include "celib/crypto/murmur_hash.inl.h"
#include "cetech/filesystem/file.h"
#include "cetech/resource_compiler/resource_compiler.h"

#include "rapidjson/document.h"
#include "rapidjson/writer.h"
#include "rapidjson/stringbuffer.h"

#include "bgfx/bgfx.h"

/*******************************************************************************
**** Interface
*******************************************************************************/
namespace cetech {

    /***************************************************************************
    **** Resource texture.
    ***************************************************************************/
    namespace resource_texture {

        /***********************************************************************
        **** Resource structure.
        ***********************************************************************/
        struct Resource {
            const bgfx::Memory* mem;
            bgfx::TextureHandle handle;
        };

        /***********************************************************************
        **** Resource type hash.
        ***********************************************************************/
        StringId64_t type_hash();

        /***********************************************************************
        **** Resouce compiler.
        ***********************************************************************/
        void compile(const char* filename,
                     CompilatorAPI& compilator);

        /***********************************************************************
        **** Resouce loader.
        ***********************************************************************/
        char* loader(FSFile& f,
                     Allocator& a);

        /***********************************************************************
        **** Resouce online callback.
        ***********************************************************************/
        void online(void* data);

        /***********************************************************************
        **** Resouce offline callback.
        ***********************************************************************/
        void offline(void* data);

        /***********************************************************************
        **** Resouce unloader.
        ***********************************************************************/
        void unloader(Allocator& a,
                      void* data);
    }
}
