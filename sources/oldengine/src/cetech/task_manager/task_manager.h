#pragma once

/*******************************************************************************
**** Includes
*******************************************************************************/

#include <cstdint>
#include <string.h>

#include "celib/memory/types.h"

#define NULL_TASK {0}

/*******************************************************************************
**** Interface
*******************************************************************************/
namespace cetech {

    /***************************************************************************
    **** Task manager. (experimental... need tests)
    ***************************************************************************/
    namespace task_manager {

        /***********************************************************************
        **** Task worker affinity.
        ***********************************************************************/
        struct WorkerAffinity {
            enum Enum {
                NONE = 0,
                MAIN_THEAD,
                WORKER1,
                WORKER2,
                WORKER3,
                WORKER4,
                WORKER5,
                WORKER6,
                WORKER7,
            };
        };

        /***********************************************************************
        **** Task priority.
        ***********************************************************************/
        struct Priority {
            enum Enum {
                High = 0,
                Normal,
                Low,
                Count
            };
        };

        /***********************************************************************
        **** Task ID.
        ***********************************************************************/
        struct TaskID {
            uint32_t i;
        };

        /***********************************************************************
        **** Task worker fce callback.
        ***********************************************************************/
        typedef void (* TaskWorkFce_t)(void*);


        /***********************************************************************
        **** Create and prepare task. Task is not proccess imidietly. You must
        **** call add_end.
        ***********************************************************************/
        TaskID add_begin(const char* name,
                         const TaskWorkFce_t fce,
                         void* data,
                         const Priority::Enum priority = Priority::Normal,
                         const TaskID depend = NULL_TASK,
                         const TaskID parent = NULL_TASK,
                         const WorkerAffinity::Enum worker_affinity = WorkerAffinity::NONE);

        /***********************************************************************
        **** Create and prepare empty task.
        ***********************************************************************/
        TaskID add_empty_begin(const char* name,
                               const Priority::Enum priority = Priority::Normal,
                               const TaskID depend = NULL_TASK,
                               const TaskID parent = NULL_TASK,
                               const WorkerAffinity::Enum worker_affinity = WorkerAffinity::NONE);

        /***********************************************************************
        **** Fire task.
        ***********************************************************************/
        void add_end(const TaskID* tasks,
                     const uint32_t count);

        /***********************************************************************
        **** Wait.
        ***********************************************************************/
        void wait(const TaskID id);

        /***********************************************************************
        **** Do work for task managet.
        ***********************************************************************/
        void do_work();

        /***********************************************************************
        **** Get curent worker id.
        ***********************************************************************/
        uint32_t get_worker_id();

        /***********************************************************************
        **** Stop all work.
        ***********************************************************************/
        void stop();
    }

    /***************************************************************************
    **** Log system globals function.
    ***************************************************************************/
    namespace task_manager_globals {

        /***********************************************************************
        **** Init system.
        ***********************************************************************/
        void init();

        /***********************************************************************
        **** Shutdown system.
        ***********************************************************************/
        void shutdown();
    }
}
