<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpBgfx</name>
    </assembly>
    <members>
        <member name="T:SharpBgfx.Bgfx">
            <summary>
            Managed interface to the bgfx graphics library.
            </summary></member>
        <member name="M:SharpBgfx.Bgfx.CheckAvailableTransientBufferSpace(System.Int32,SharpBgfx.VertexLayout,System.Int32)">
            <summary>
            Checks for available space to allocate transient index and vertex buffers.
            </summary>
            <param name="vertexCount">The number of vertices to allocate.</param>
            <param name="layout">The layout of each vertex.</param>
            <param name="indexCount">The number of indices to allocate.</param>
            <returns><c>true</c> if there is sufficient space for both vertex and index buffers.</returns></member>
        <member name="M:SharpBgfx.Bgfx.AllocateTransientBuffers(System.Int32,SharpBgfx.VertexLayout,System.Int32,SharpBgfx.TransientVertexBuffer@,SharpBgfx.TransientIndexBuffer@)">
            <summary>
            Attempts to allocate both a transient vertex buffer and index buffer.
            </summary>
            <param name="vertexCount">The number of vertices to allocate.</param>
            <param name="layout">The layout of each vertex.</param>
            <param name="indexCount">The number of indices to allocate.</param>
            <param name="vertexBuffer">Returns the allocated transient vertex buffer.</param>
            <param name="indexBuffer">Returns the allocated transient index buffer.</param>
            <returns><c>true</c> if both space requirements are satisfied and the buffers were allocated.</returns></member>
        <member name="M:SharpBgfx.Bgfx.VertexPack(System.Single*,System.Boolean,SharpBgfx.VertexAttributeUsage,SharpBgfx.VertexLayout,System.IntPtr,System.Int32)">
            <summary>
            Packs a vector into vertex stream format.
            </summary>
            <param name="input">The four element vector to pack.</param>
            <param name="inputNormalized"><c>true</c> if the input vector is normalized.</param>
            <param name="attribute">The attribute usage of the vector data.</param>
            <param name="layout">The layout of the vertex stream.</param>
            <param name="data">The pointer to the vertex data stream.</param>
            <param name="index">The index of the vertex within the stream.</param></member>
        <member name="M:SharpBgfx.Bgfx.VertexUnpack(System.Single*,SharpBgfx.VertexAttributeUsage,SharpBgfx.VertexLayout,System.IntPtr,System.Int32)">
            <summary>
            Unpack a vector from a vertex stream.
            </summary>
            <param name="output">A pointer to four floats that will receive the unpacked vector.</param>
            <param name="attribute">The usage of the vertex attribute.</param>
            <param name="layout">The layout of the vertex stream.</param>
            <param name="data">A pointer to the vertex data stream.</param>
            <param name="index">The index of the vertex within the stream.</param></member>
        <member name="M:SharpBgfx.Bgfx.VertexConvert(SharpBgfx.VertexLayout,System.IntPtr,SharpBgfx.VertexLayout,System.IntPtr,System.Int32)">
            <summary>
            Converts a stream of vertex data from one format to another.
            </summary>
            <param name="destinationLayout">The destination format.</param>
            <param name="destinationData">A pointer to the output location.</param>
            <param name="sourceLayout">The source format.</param>
            <param name="sourceData">A pointer to the source vertex data to convert.</param>
            <param name="count">The number of vertices to convert.</param></member>
        <member name="M:SharpBgfx.Bgfx.WeldVertices(SharpBgfx.VertexLayout,System.IntPtr,System.Int32,System.Int32[]@,System.Single)">
            <summary>
            Welds vertices that are close together.
            </summary>
            <param name="layout">The layout of the vertex stream.</param>
            <param name="data">A pointer to the vertex data stream.</param>
            <param name="count">The number of vertices in the stream.</param>
            <param name="remappingTable">An output remapping table from the original vertices to the welded ones.</param>
            <param name="epsilon">The tolerance for welding vertex positions.</param>
            <returns>
            The number of unique vertices after welding.
            </returns></member>
        <member name="M:SharpBgfx.Bgfx.ImageSwizzleBgra8(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Swizzles an RGBA8 image to BGRA8.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="pitch">The pitch of the image (in bytes).</param>
            <param name="source">The source image data.</param>
            <param name="destination">The destination image data.</param>
            <remarks>
            This method can operate in-place on the image (i.e. src == dst).
            </remarks></member>
        <member name="M:SharpBgfx.Bgfx.ImageRgba8Downsample2x2(System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Downsamples an RGBA8 image with a 2x2 pixel average filter.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="pitch">The pitch of the image (in bytes).</param>
            <param name="source">The source image data.</param>
            <param name="destination">The destination image data.</param>
            <remarks>
            This method can operate in-place on the image (i.e. src == dst).
            </remarks></member>
        <member name="M:SharpBgfx.Bgfx.SetPlatformData(SharpBgfx.PlatformData)">
            <summary>
            Sets platform-specific data pointers to hook into low-level library functionality.
            </summary>
            <param name="platformData">A collection of platform-specific data pointers.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetWindowHandle(System.IntPtr)">
            <summary>
            Sets the handle of the main rendering window.
            </summary>
            <param name="windowHandle">The handle of the native OS window.</param></member>
        <member name="M:SharpBgfx.Bgfx.GetInternalData">
            <summary>
            Gets access to underlying API internals for interop scenarios.
            </summary>
            <returns>A structure containing API context information.</returns></member>
        <member name="M:SharpBgfx.Bgfx.ManuallyRenderFrame">
            <summary>
            Manually renders a frame. Use this to control the Bgfx render loop.
            </summary>
            <returns>The result of the render call.</returns>
            <remarks>
            Use this function if you don't want Bgfx to create and maintain a
            separate render thread. Call this once before <see cref="M:SharpBgfx.Bgfx.Init(SharpBgfx.RendererBackend,SharpBgfx.Adapter,SharpBgfx.ICallbackHandler)" />
            to avoid having the thread created internally.
            </remarks></member>
        <member name="M:SharpBgfx.Bgfx.GetCurrentBackend">
            <summary>
            Gets the currently active rendering backend API.
            </summary>
            <returns>The currently active rendering backend.</returns></member>
        <member name="M:SharpBgfx.Bgfx.Shutdown">
            <summary>
            Closes the library and releases all resources.
            </summary></member>
        <member name="M:SharpBgfx.Bgfx.GetCaps">
            <summary>
            Gets the capabilities of the rendering device.
            </summary>
            <returns>Information about the capabilities of the device.</returns></member>
        <member name="M:SharpBgfx.Bgfx.GetStats">
            <summary>
            Gets frame performance statistics.
            </summary>
            <returns>Information about frame performance.</returns></member>
        <member name="M:SharpBgfx.Bgfx.Reset(System.Int32,System.Int32,SharpBgfx.ResetFlags)">
            <summary>
            Resets graphics settings and surfaces.
            </summary>
            <param name="width">The width of the main window.</param>
            <param name="height">The height of the main window.</param>
            <param name="flags">Flags used to configure rendering output.</param></member>
        <member name="M:SharpBgfx.Bgfx.Frame">
            <summary>
            Advances to the next frame.
            </summary>
            <returns>The current frame number.</returns>
            <remarks>
            When using a multithreaded renderer, this call
            just swaps internal buffers, kicks render thread, and returns. In a
            singlethreaded renderer this call does frame rendering.
            </remarks></member>
        <member name="M:SharpBgfx.Bgfx.Init(SharpBgfx.RendererBackend,SharpBgfx.Adapter,SharpBgfx.ICallbackHandler)">
            <summary>
            Initializes the graphics library on the specified adapter.
            </summary>
            <param name="backend">The backend API to use for rendering.</param>
            <param name="adapter">The adapter on which to create the device.</param>
            <param name="callbackHandler">A set of handlers for various library callbacks.</param></member>
        <member name="M:SharpBgfx.Bgfx.GetSupportedBackends">
            <summary>
            Gets the set of supported rendering backends.
            </summary>
            <returns></returns></member>
        <member name="M:SharpBgfx.Bgfx.GetBackendName(SharpBgfx.RendererBackend)">
            <summary>
            Gets the friendly name of a specific rendering backend.
            </summary>
            <param name="backend">The backend for which to retrieve a name.</param>
            <returns>The friendly name of the specified backend.</returns></member>
        <member name="M:SharpBgfx.Bgfx.SetDebugFeatures(SharpBgfx.DebugFeatures)">
            <summary>
            Enables debugging features.
            </summary>
            <param name="features">The set of debug features to enable.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetDebugMarker(System.String)">
            <summary>
            Sets a marker that can be used for debugging purposes.
            </summary>
            <param name="marker">The user-defined name of the marker.</param></member>
        <member name="M:SharpBgfx.Bgfx.DebugTextClear(SharpBgfx.DebugColor,System.Boolean)">
            <summary>
            Clears the debug text buffer.
            </summary>
            <param name="color">The color with which to clear the background.</param>
            <param name="smallText"><c>true</c> to use a small font for debug output; <c>false</c> to use normal sized text.</param></member>
        <member name="M:SharpBgfx.Bgfx.DebugTextWrite(System.Int32,System.Int32,SharpBgfx.DebugColor,SharpBgfx.DebugColor,System.String,System.Object[])">
            <summary>
            Writes debug text to the screen.
            </summary>
            <param name="x">The X position, in cells.</param>
            <param name="y">The Y position, in cells.</param>
            <param name="color">The color of the text.</param>
            <param name="format">The format of the message.</param>
            <param name="args">The arguments with which to format the message.</param></member>
        <member name="M:SharpBgfx.Bgfx.DebugTextWrite(System.Int32,System.Int32,SharpBgfx.DebugColor,SharpBgfx.DebugColor,System.String)">
            <summary>
            Writes debug text to the screen.
            </summary>
            <param name="x">The X position, in cells.</param>
            <param name="y">The Y position, in cells.</param>
            <param name="color">The color of the text.</param>
            <param name="message">The message to write.</param></member>
        <member name="M:SharpBgfx.Bgfx.DebugTextWrite(System.Int32,System.Int32,SharpBgfx.DebugColor,SharpBgfx.DebugColor,System.IntPtr)">
            <summary>
            Writes debug text to the screen.
            </summary>
            <param name="x">The X position, in cells.</param>
            <param name="y">The Y position, in cells.</param>
            <param name="color">The color of the text.</param>
            <param name="message">The message to write.</param></member>
        <member name="M:SharpBgfx.Bgfx.DebugTextImage(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Draws data directly into the debug text buffer.
            </summary>
            <param name="x">The X position, in cells.</param>
            <param name="y">The Y position, in cells.</param>
            <param name="width">The width of the image to draw.</param>
            <param name="height">The height of the image to draw.</param>
            <param name="data">The image data bytes.</param>
            <param name="pitch">The pitch of each line in the image data.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetViewName(System.Byte,System.String)">
            <summary>
            Sets the name of a rendering view, for debugging purposes.
            </summary>
            <param name="id">The index of the view.</param>
            <param name="name">The name of the view.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetViewRect(System.Byte,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the viewport for the given rendering view.
            </summary>
            <param name="id">The index of the view.</param>
            <param name="x">The X coordinate of the viewport.</param>
            <param name="y">The Y coordinate of the viewport.</param>
            <param name="width">The width of the viewport, in pixels.</param>
            <param name="height">The height of the viewport, in pixels.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetViewRect(System.Byte,System.Int32,System.Int32,SharpBgfx.BackbufferRatio)">
            <summary>
            Sets the viewport for the given rendering view.
            </summary>
            <param name="id">The index of the view.</param>
            <param name="x">The X coordinate of the viewport.</param>
            <param name="y">The Y coordinate of the viewport.</param>
            <param name="ratio">The ratio with which to automatically size the viewport.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetViewScissor(System.Byte,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the scissor rectangle for a specific view.
            </summary>
            <param name="id">The index of the view.</param>
            <param name="x">The X coordinate of the scissor rectangle.</param>
            <param name="y">The Y coordinate of the scissor rectangle.</param>
            <param name="width">The width of the scissor rectangle.</param>
            <param name="height">The height of the scissor rectangle.</param>
            <remarks>
            Set all values to zero to disable the scissor test.
            </remarks></member>
        <member name="M:SharpBgfx.Bgfx.SetViewClear(System.Byte,SharpBgfx.ClearTargets,System.Int32,System.Single,System.Byte)">
            <summary>
            Sets view clear flags.
            </summary>
            <param name="id">The index of the view.</param>
            <param name="targets">The target surfaces that should be cleared.</param>
            <param name="colorRgba">The clear color.</param>
            <param name="depth">The value to fill the depth buffer.</param>
            <param name="stencil">The value to fill the stencil buffer.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetViewClear(System.Byte,SharpBgfx.ClearTargets,System.Single,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets view clear flags for multiple render targets.
            </summary>
            <param name="id">The index of the view.</param>
            <param name="targets">The target surfaces that should be cleared.</param>
            <param name="depth">The value to fill the depth buffer.</param>
            <param name="stencil">The value to fill the stencil buffer.</param>
            <param name="rt0">The color palette index for render target 0.</param>
            <param name="rt1">The color palette index for render target 1.</param>
            <param name="rt2">The color palette index for render target 2.</param>
            <param name="rt3">The color palette index for render target 3.</param>
            <param name="rt4">The color palette index for render target 4.</param>
            <param name="rt5">The color palette index for render target 5.</param>
            <param name="rt6">The color palette index for render target 6.</param>
            <param name="rt7">The color palette index for render target 7.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetPaletteColor(System.Byte,System.Single*)">
            <summary>
            Sets an entry in the color palette.
            </summary>
            <param name="index">The index of the palette entry to set.</param>
            <param name="color">The color to set.</param>
            <remarks>
            The clear color palette is used with SetViewClear for clearing multiple render targets
            to different color values.
            </remarks></member>
        <member name="M:SharpBgfx.Bgfx.SetViewSequential(System.Byte,System.Boolean)">
            <summary>
            Enables or disables sequential mode for a view. Sequential mode issues draw calls in the order they are received.
            </summary>
            <param name="id">The index of the view.</param>
            <param name="enabled"><c>true</c> to enable sequential mode; otherwise, <c>false</c>.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetViewTransform(System.Byte,System.Single*,System.Single*)">
            <summary>
            Sets the view and projection transforms for the given rendering view.
            </summary>
            <param name="id">The index of the view.</param>
            <param name="view">The 4x4 view transform matrix.</param>
            <param name="projection">The 4x4 projection transform matrix.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetViewFrameBuffer(System.Byte,SharpBgfx.FrameBuffer)">
            <summary>
            Sets the frame buffer used by a particular view.
            </summary>
            <param name="id">The index of the view.</param>
            <param name="frameBuffer">The frame buffer to set.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetTransform(System.Single*,System.Int32)">
            <summary>
            Sets the model transform to use for drawing primitives.
            </summary>
            <param name="matrix">A pointer to one or more matrices to set.</param>
            <param name="count">The number of matrices in the array.</param>
            <returns>An index into the matrix cache to allow reusing the matrix in other calls.</returns></member>
        <member name="M:SharpBgfx.Bgfx.SetTransform(System.Int32,System.Int32)">
            <summary>
            Sets a model transform from the cache.
            </summary>
            <param name="cacheIndex">The index of the cached matrix.</param>
            <param name="count">The number of matrices to set from the cache.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetScissor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the scissor rectangle to use for clipping primitives.
            </summary>
            <param name="x">The X coordinate of the scissor rectangle.</param>
            <param name="y">The Y coordinate of the scissor rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>
            An index into the scissor cache to allow reusing the rectangle in other calls.
            </returns></member>
        <member name="M:SharpBgfx.Bgfx.SetScissor(System.Int32)">
            <summary>
            Sets a scissor rectangle from the cache.
            </summary>
            <param name="cacheIndex">The index of the cached scissor rectangle, or -1 to unset.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetIndexBuffer(SharpBgfx.IndexBuffer,System.Int32,System.Int32)">
            <summary>
            Sets the index buffer to use for drawing primitives.
            </summary>
            <param name="indexBuffer">The index buffer to set.</param>
            <param name="firstIndex">The first index in the buffer to use.</param>
            <param name="count">The number of indices to pull from the buffer.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetVertexBuffer(SharpBgfx.VertexBuffer,System.Int32,System.Int32)">
            <summary>
            Sets the vertex buffer to use for drawing primitives.
            </summary>
            <param name="vertexBuffer">The vertex buffer to set.</param>
            <param name="firstVertex">The index of the first vertex to use.</param>
            <param name="count">The number of vertices to pull from the buffer.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetIndexBuffer(SharpBgfx.DynamicIndexBuffer,System.Int32,System.Int32)">
            <summary>
            Sets the index buffer to use for drawing primitives.
            </summary>
            <param name="indexBuffer">The index buffer to set.</param>
            <param name="firstIndex">The first index in the buffer to use.</param>
            <param name="count">The number of indices to pull from the buffer.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetVertexBuffer(SharpBgfx.DynamicVertexBuffer,System.Int32)">
            <summary>
            Sets the vertex buffer to use for drawing primitives.
            </summary>
            <param name="vertexBuffer">The vertex buffer to set.</param>
            <param name="count">The number of vertices to pull from the buffer.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetIndexBuffer(SharpBgfx.TransientIndexBuffer,System.Int32,System.Int32)">
            <summary>
            Sets the index buffer to use for drawing primitives.
            </summary>
            <param name="indexBuffer">The index buffer to set.</param>
            <param name="firstIndex">The first index in the buffer to use.</param>
            <param name="count">The number of indices to pull from the buffer.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetVertexBuffer(SharpBgfx.TransientVertexBuffer,System.Int32,System.Int32)">
            <summary>
            Sets the vertex buffer to use for drawing primitives.
            </summary>
            <param name="vertexBuffer">The vertex buffer to set.</param>
            <param name="firstVertex">The index of the first vertex to use.</param>
            <param name="count">The number of vertices to pull from the buffer.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetInstanceDataBuffer(SharpBgfx.InstanceDataBuffer,System.Int32)">
            <summary>
            Sets instance data to use for drawing primitives.
            </summary>
            <param name="instanceData">The instance data.</param>
            <param name="count">The number of entries to pull from the buffer.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetInstanceDataBuffer(SharpBgfx.VertexBuffer,System.Int32,System.Int32)">
            <summary>
            Sets instance data to use for drawing primitives.
            </summary>
            <param name="vertexBuffer">The vertex buffer containing instance data.</param>
            <param name="firstVertex">The index of the first vertex to use.</param>
            <param name="count">The number of vertices to pull from the buffer.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetInstanceDataBuffer(SharpBgfx.DynamicVertexBuffer,System.Int32,System.Int32)">
            <summary>
            Sets instance data to use for drawing primitives.
            </summary>
            <param name="vertexBuffer">The vertex buffer containing instance data.</param>
            <param name="firstVertex">The index of the first vertex to use.</param>
            <param name="count">The number of vertices to pull from the buffer.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetUniform(SharpBgfx.Uniform,System.Single,System.Int32)">
            <summary>
            Sets the value of a uniform parameter.
            </summary>
            <param name="uniform">The uniform to set.</param>
            <param name="value">A pointer to the uniform's data.</param>
            <param name="arraySize">The size of the data array, if the uniform is an array.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetUniform(SharpBgfx.Uniform,System.Void*,System.Int32)">
            <summary>
            Sets the value of a uniform parameter.
            </summary>
            <param name="uniform">The uniform to set.</param>
            <param name="value">A pointer to the uniform's data.</param>
            <param name="arraySize">The size of the data array, if the uniform is an array.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetUniform(SharpBgfx.Uniform,System.IntPtr,System.Int32)">
            <summary>
            Sets the value of a uniform parameter.
            </summary>
            <param name="uniform">The uniform to set.</param>
            <param name="value">A pointer to the uniform's data.</param>
            <param name="arraySize">The size of the data array, if the uniform is an array.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetTexture(System.Byte,SharpBgfx.Uniform,SharpBgfx.Texture)">
            <summary>
            Sets a texture to use for drawing primitives.
            </summary>
            <param name="textureUnit">The texture unit to set.</param>
            <param name="sampler">The sampler uniform.</param>
            <param name="texture">The texture to set.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetTexture(System.Byte,SharpBgfx.Uniform,SharpBgfx.Texture,SharpBgfx.TextureFlags)">
            <summary>
            Sets a texture to use for drawing primitives.
            </summary>
            <param name="textureUnit">The texture unit to set.</param>
            <param name="sampler">The sampler uniform.</param>
            <param name="texture">The texture to set.</param>
            <param name="flags">Sampling flags that override the default flags in the texture itself.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetTexture(System.Byte,SharpBgfx.Uniform,SharpBgfx.FrameBuffer,System.Byte)">
            <summary>
            Sets a texture to use for drawing primitives.
            </summary>
            <param name="textureUnit">The texture unit to set.</param>
            <param name="sampler">The sampler uniform.</param>
            <param name="frameBuffer">The frame buffer.</param>
            <param name="attachment">The index of the frame buffer attachment to set as a texture.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetTexture(System.Byte,SharpBgfx.Uniform,SharpBgfx.FrameBuffer,System.Byte,SharpBgfx.TextureFlags)">
            <summary>
            Sets a texture to use for drawing primitives.
            </summary>
            <param name="textureUnit">The texture unit to set.</param>
            <param name="sampler">The sampler uniform.</param>
            <param name="frameBuffer">The frame buffer.</param>
            <param name="attachment">The index of the attachment to set.</param>
            <param name="flags">Sampling flags that override the default flags in the texture itself.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetComputeImage(System.Byte,SharpBgfx.Uniform,SharpBgfx.Texture,System.Byte,SharpBgfx.ComputeBufferAccess,SharpBgfx.TextureFormat)">
            <summary>
            Sets a texture mip as a compute image.
            </summary>
            <param name="stage">The buffer stage to set.</param>
            <param name="sampler">The sampler uniform.</param>
            <param name="texture">The texture to set.</param>
            <param name="mip">The index of the mip level within the texture to set.</param>
            <param name="format">The format of the buffer data.</param>
            <param name="access">Access control flags.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetComputeImage(System.Byte,SharpBgfx.Uniform,SharpBgfx.FrameBuffer,System.Byte,SharpBgfx.ComputeBufferAccess,SharpBgfx.TextureFormat)">
            <summary>
            Sets a frame buffer attachment as a compute image.
            </summary>
            <param name="stage">The buffer stage to set.</param>
            <param name="sampler">The sampler uniform.</param>
            <param name="frameBuffer">The frame buffer.</param>
            <param name="attachment">The attachment index.</param>
            <param name="format">The format of the buffer data.</param>
            <param name="access">Access control flags.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetComputeBuffer(System.Byte,SharpBgfx.IndexBuffer,SharpBgfx.ComputeBufferAccess)">
            <summary>
            Sets an index buffer as a compute resource.
            </summary>
            <param name="stage">The resource stage to set.</param>
            <param name="buffer">The buffer to set.</param>
            <param name="access">Access control flags.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetComputeBuffer(System.Byte,SharpBgfx.VertexBuffer,SharpBgfx.ComputeBufferAccess)">
            <summary>
            Sets a verterx buffer as a compute resource.
            </summary>
            <param name="stage">The resource stage to set.</param>
            <param name="buffer">The buffer to set.</param>
            <param name="access">Access control flags.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetComputeBuffer(System.Byte,SharpBgfx.DynamicIndexBuffer,SharpBgfx.ComputeBufferAccess)">
            <summary>
            Sets a dynamic index buffer as a compute resource.
            </summary>
            <param name="stage">The resource stage to set.</param>
            <param name="buffer">The buffer to set.</param>
            <param name="access">Access control flags.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetComputeBuffer(System.Byte,SharpBgfx.DynamicVertexBuffer,SharpBgfx.ComputeBufferAccess)">
            <summary>
            Sets a dynamic vertex buffer as a compute resource.
            </summary>
            <param name="stage">The resource stage to set.</param>
            <param name="buffer">The buffer to set.</param>
            <param name="access">Access control flags.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetComputeBuffer(System.Byte,SharpBgfx.IndirectBuffer,SharpBgfx.ComputeBufferAccess)">
            <summary>
            Sets an indirect buffer as a compute resource.
            </summary>
            <param name="stage">The resource stage to set.</param>
            <param name="buffer">The buffer to set.</param>
            <param name="access">Access control flags.</param></member>
        <member name="M:SharpBgfx.Bgfx.Touch(System.Byte)">
            <summary>
            Marks a view as "touched", ensuring that its background is cleared even if nothing is rendered.
            </summary>
            <param name="id">The index of the view to touch.</param>
            <returns>The number of draw calls.</returns></member>
        <member name="M:SharpBgfx.Bgfx.ResetView(System.Byte)">
            <summary>
            Resets all view settings to default.
            </summary>
            <param name="id">The index of the view to reset.</param></member>
        <member name="M:SharpBgfx.Bgfx.Submit(System.Byte,SharpBgfx.Program,System.Int32)">
            <summary>
            Submits the current batch of primitives for rendering.
            </summary>
            <param name="id">The index of the view to submit.</param>
            <param name="program">The program with which to render.</param>
            <param name="depth">A depth value to use for sorting the batch.</param>
            <returns>The number of draw calls.</returns></member>
        <member name="M:SharpBgfx.Bgfx.Submit(System.Byte,SharpBgfx.Program,SharpBgfx.OcclusionQuery,System.Int32)">
            <summary>
            Submits the current batch of primitives for rendering.
            </summary>
            <param name="id">The index of the view to submit.</param>
            <param name="program">The program with which to render.</param>
            <param name="query">An occlusion query to use as a predicate during rendering.</param>
            <param name="depth">A depth value to use for sorting the batch.</param>
            <returns>The number of draw calls.</returns></member>
        <member name="M:SharpBgfx.Bgfx.Submit(System.Byte,SharpBgfx.Program,SharpBgfx.IndirectBuffer,System.Int32,System.Int32,System.Int32)">
            <summary>
            Submits an indirect batch of drawing commands to be used for rendering.
            </summary>
            <param name="id">The index of the view to submit.</param>
            <param name="program">The program with which to render.</param>
            <param name="indirectBuffer">The buffer containing drawing commands.</param>
            <param name="startIndex">The index of the first command to process.</param>
            <param name="count">The number of commands to process from the buffer.</param>
            <param name="depth">A depth value to use for sorting the batch.</param>
            <returns>The number of draw calls.</returns></member>
        <member name="M:SharpBgfx.Bgfx.Discard">
            <summary>
            Discards all previously set state for the draw call.
            </summary></member>
        <member name="M:SharpBgfx.Bgfx.Dispatch(System.Byte,SharpBgfx.Program,System.Int32,System.Int32,System.Int32)">
            <summary>
            Dispatches a compute job.
            </summary>
            <param name="id">The index of the view to dispatch.</param>
            <param name="program">The shader program to use.</param>
            <param name="xCount">The size of the job in the first dimension.</param>
            <param name="yCount">The size of the job in the second dimension.</param>
            <param name="zCount">The size of the job in the third dimension.</param></member>
        <member name="M:SharpBgfx.Bgfx.Dispatch(System.Byte,SharpBgfx.Program,SharpBgfx.IndirectBuffer,System.Int32,System.Int32)">
            <summary>
            Dispatches an indirect compute job.
            </summary>
            <param name="id">The index of the view to dispatch.</param>
            <param name="program">The shader program to use.</param>
            <param name="indirectBuffer">The buffer containing drawing commands.</param>
            <param name="startIndex">The index of the first command to process.</param>
            <param name="count">The number of commands to process from the buffer.</param></member>
        <member name="M:SharpBgfx.Bgfx.SaveScreenShot(System.String)">
            <summary>
            Requests that a screenshot be saved. The ScreenshotTaken event will be fired to save the result.
            </summary>
            <param name="filePath">The file path that will be passed to the callback event.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetRenderState(SharpBgfx.RenderState)">
            <summary>
            Set rendering states used to draw primitives.
            </summary>
            <param name="state">The set of states to set.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetRenderState(SharpBgfx.RenderState,System.Int32)">
            <summary>
            Set rendering states used to draw primitives.
            </summary>
            <param name="state">The set of states to set.</param>
            <param name="colorRgba">The color used for "factor" blending modes.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetStencil(SharpBgfx.StencilFlags)">
            <summary>
            Sets stencil test state.
            </summary>
            <param name="frontFace">The stencil state to use for front faces.</param></member>
        <member name="M:SharpBgfx.Bgfx.SetStencil(SharpBgfx.StencilFlags,SharpBgfx.StencilFlags)">
            <summary>
            Sets stencil test state.
            </summary>
            <param name="frontFace">The stencil state to use for front faces.</param>
            <param name="backFace">The stencil state to use for back faces.</param></member>
        <member name="T:SharpBgfx.ICallbackHandler">
            <summary>
            Provides an interface for programs to respond to callbacks from the bgfx library.
            </summary></member>
        <member name="M:SharpBgfx.ICallbackHandler.ReportError(SharpBgfx.ErrorType,System.String)">
            <summary>
            Called when an error occurs in the library.
            </summary>
            <param name="errorType">The type of error that occurred.</param>
            <param name="message">Message string detailing what went wrong.</param>
            <remarks>
            If the error type is not <see cref="F:SharpBgfx.ErrorType.DebugCheck" />, bgfx is in an
            unrecoverable state and the application should terminate.
            This method can be called from any thread.
            </remarks></member>
        <member name="M:SharpBgfx.ICallbackHandler.ReportDebug(System.String,System.Int32,System.String,System.IntPtr)">
            <summary>
            Called to print debug messages.
            </summary>
            <param name="fileName">The name of the source file in which the message originated.</param>
            <param name="line">The line number in which the message originated.</param>
            <param name="format">The message format string.</param>
            <param name="args">A pointer to format arguments.</param>
            <remarks>This method can be called from any thread.</remarks></member>
        <member name="M:SharpBgfx.ICallbackHandler.GetCachedSize(System.Int64)">
            <summary>
            Queries the size of a cache item.
            </summary>
            <param name="id">The cache entry ID.</param>
            <returns>The size of the cache item, or 0 if the item is not found.</returns></member>
        <member name="M:SharpBgfx.ICallbackHandler.GetCacheEntry(System.Int64,System.IntPtr,System.Int32)">
            <summary>
            Retrieves an entry from the cache.
            </summary>
            <param name="id">The cache entry ID.</param>
            <param name="data">A pointer that should be filled with data from the cache.</param>
            <param name="size">The size of the memory block pointed to be <paramref name="data" />.</param>
            <returns><c>true</c> if the item is found in the cache; otherwise, <c>false</c>.</returns></member>
        <member name="M:SharpBgfx.ICallbackHandler.SetCacheEntry(System.Int64,System.IntPtr,System.Int32)">
            <summary>
            Saves an entry in the cache.
            </summary>
            <param name="id">The cache entry ID.</param>
            <param name="data">A pointer to the data to save in the cache.</param>
            <param name="size">The size of the memory block pointed to be <paramref name="data" />.</param></member>
        <member name="M:SharpBgfx.ICallbackHandler.SaveScreenShot(System.String,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Save a captured screenshot.
            </summary>
            <param name="path">The path at which to save the image.</param>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="pitch">The number of bytes between lines in the image.</param>
            <param name="data">A pointer to the image data to save.</param>
            <param name="size">The size of the image memory.</param>
            <param name="flipVertical"><c>true</c> if the image origin is bottom left instead of top left; otherwise, <c>false</c>.</param></member>
        <member name="M:SharpBgfx.ICallbackHandler.CaptureStarted(System.Int32,System.Int32,System.Int32,SharpBgfx.TextureFormat,System.Boolean)">
            <summary>
            Notifies that a frame capture has begun.
            </summary>
            <param name="width">The width of the capture surface.</param>
            <param name="height">The height of the capture surface.</param>
            <param name="pitch">The number of bytes between lines in the captured frames.</param>
            <param name="format">The format of captured frames.</param>
            <param name="flipVertical"><c>true</c> if the image origin is bottom left instead of top left; otherwise, <c>false</c>.</param></member>
        <member name="M:SharpBgfx.ICallbackHandler.CaptureFinished">
            <summary>
            Notifies that a frame capture has finished.
            </summary></member>
        <member name="M:SharpBgfx.ICallbackHandler.CaptureFrame(System.IntPtr,System.Int32)">
            <summary>
            Notifies that a frame has been captured.
            </summary>
            <param name="data">A pointer to the frame data.</param>
            <param name="size">The size of the frame data.</param></member>
        <member name="T:SharpBgfx.Capabilities">
            <summary>
            Contains information about the capabilities of the rendering device.
            </summary></member>
        <member name="P:SharpBgfx.Capabilities.Backend">
            <summary>
            The currently active rendering backend API.
            </summary></member>
        <member name="P:SharpBgfx.Capabilities.SupportedFeatures">
            <summary>
            A set of extended features supported by the device.
            </summary></member>
        <member name="P:SharpBgfx.Capabilities.MaxTextureSize">
            <summary>
            The maximum size of a texture, in pixels.
            </summary></member>
        <member name="P:SharpBgfx.Capabilities.MaxViews">
            <summary>
            The maximum number of render views supported.
            </summary></member>
        <member name="P:SharpBgfx.Capabilities.MaxDrawCalls">
            <summary>
            The maximum number of draw calls in a single frame.
            </summary></member>
        <member name="P:SharpBgfx.Capabilities.MaxFramebufferAttachments">
            <summary>
            The maximum number of attachments to a single framebuffer.
            </summary></member>
        <member name="P:SharpBgfx.Capabilities.CurrentAdapter">
            <summary>
            Details about the currently active graphics adapter.
            </summary></member>
        <member name="P:SharpBgfx.Capabilities.Adapters">
            <summary>
            A list of all graphics adapters installed on the system.
            </summary></member>
        <member name="M:SharpBgfx.Capabilities.CheckTextureSupport(SharpBgfx.TextureFormat)">
            <summary>
            Checks device support for a specific texture format.
            </summary>
            <param name="format">The format to check.</param>
            <returns>The level of support for the given format.</returns></member>
        <member name="T:SharpBgfx.Capabilities.AdapterCollection">
            <summary>
            Provides access to a collection of adapters.
            </summary></member>
        <member name="P:SharpBgfx.Capabilities.AdapterCollection.Item(System.Int32)">
            <summary>
            Accesses the element at the specified index.
            </summary>
            <param name="index">The index of the element to retrieve.</param>
            <returns>The element at the given index.</returns></member>
        <member name="P:SharpBgfx.Capabilities.AdapterCollection.Count">
            <summary>
            The number of elements in the collection.
            </summary></member>
        <member name="M:SharpBgfx.Capabilities.AdapterCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>A collection enumerator.</returns></member>
        <member name="T:SharpBgfx.Capabilities.AdapterCollection.Enumerator">
            <summary>
            Implements an enumerator for an AdapterCollection.
            </summary></member>
        <member name="P:SharpBgfx.Capabilities.AdapterCollection.Enumerator.Current">
            <summary>
            The current enumerated item.
            </summary></member>
        <member name="M:SharpBgfx.Capabilities.AdapterCollection.Enumerator.MoveNext">
            <summary>
            Advances to the next item in the sequence.
            </summary>
            <returns><c>true</c> if there are more items in the collection; otherwise, <c>false</c>.</returns></member>
        <member name="M:SharpBgfx.Capabilities.AdapterCollection.Enumerator.Dispose">
            <summary>
            Empty; does nothing.
            </summary></member>
        <member name="M:SharpBgfx.Capabilities.AdapterCollection.Enumerator.Reset">
            <summary>
            Not implemented.
            </summary></member>
        <member name="T:SharpBgfx.Adapter">
            <summary>
            Contains details about an installed graphics adapter.
            </summary></member>
        <member name="F:SharpBgfx.Adapter.Default">
            <summary>
            Represents the default adapter for the system.
            </summary></member>
        <member name="F:SharpBgfx.Adapter.Vendor">
            <summary>
            The IHV that published the adapter.
            </summary></member>
        <member name="F:SharpBgfx.Adapter.DeviceId">
            <summary>
            A vendor-specific identifier for the adapter type.
            </summary></member>
        <member name="M:SharpBgfx.Adapter.#ctor(SharpBgfx.Vendor,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.Adapter" /> struct.
            </summary>
            <param name="vendor">The vendor.</param>
            <param name="deviceId">The device ID.</param></member>
        <member name="M:SharpBgfx.Adapter.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns></member>
        <member name="T:SharpBgfx.PerfStats">
            <summary>
            Contains various performance metrics tracked by the library.
            </summary></member>
        <member name="P:SharpBgfx.PerfStats.CpuTimeStart">
            <summary>
            CPU frame start time.
            </summary></member>
        <member name="P:SharpBgfx.PerfStats.CpuTimeEnd">
            <summary>
            CPU frame end time.
            </summary></member>
        <member name="P:SharpBgfx.PerfStats.CpuTimerFrequency">
            <summary>
            CPU timer frequency.
            </summary></member>
        <member name="P:SharpBgfx.PerfStats.CpuElapsed">
            <summary>
            Elapsed CPU time.
            </summary></member>
        <member name="P:SharpBgfx.PerfStats.GpuTimeStart">
            <summary>
            GPU frame start time.
            </summary></member>
        <member name="P:SharpBgfx.PerfStats.GpuTimeEnd">
            <summary>
            GPU frame end time.
            </summary></member>
        <member name="P:SharpBgfx.PerfStats.GpuTimerFrequency">
            <summary>
            GPU timer frequency.
            </summary></member>
        <member name="P:SharpBgfx.PerfStats.GpuElapsed">
            <summary>
            Elapsed GPU time.
            </summary></member>
        <member name="T:SharpBgfx.IndirectBuffer">
            <summary>
            Represents a buffer that can contain indirect drawing commands created and processed entirely on the GPU.
            </summary></member>
        <member name="F:SharpBgfx.IndirectBuffer.Invalid">
            <summary>
            Represents an invalid handle.
            </summary></member>
        <member name="M:SharpBgfx.IndirectBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.IndirectBuffer" /> struct.
            </summary>
            <param name="size">The number of commands that can fit in the buffer.</param></member>
        <member name="M:SharpBgfx.IndirectBuffer.Dispose">
            <summary>
            Releases the index buffer.
            </summary></member>
        <member name="M:SharpBgfx.IndirectBuffer.Equals(SharpBgfx.IndirectBuffer)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns></member>
        <member name="M:SharpBgfx.IndirectBuffer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.IndirectBuffer.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns></member>
        <member name="M:SharpBgfx.IndirectBuffer.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns></member>
        <member name="M:SharpBgfx.IndirectBuffer.op_Equality(SharpBgfx.IndirectBuffer,SharpBgfx.IndirectBuffer)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.IndirectBuffer.op_Inequality(SharpBgfx.IndirectBuffer,SharpBgfx.IndirectBuffer)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="T:SharpBgfx.DynamicIndexBuffer">
            <summary>
            Represents a dynamically updateable index buffer.
            </summary></member>
        <member name="F:SharpBgfx.DynamicIndexBuffer.Invalid">
            <summary>
            Represents an invalid handle.
            </summary></member>
        <member name="M:SharpBgfx.DynamicIndexBuffer.#ctor(System.Int32,SharpBgfx.BufferFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.DynamicIndexBuffer" /> struct.
            </summary>
            <param name="indexCount">The number of indices that can fit in the buffer.</param>
            <param name="flags">Flags used to control buffer behavior.</param></member>
        <member name="M:SharpBgfx.DynamicIndexBuffer.#ctor(SharpBgfx.MemoryBlock,SharpBgfx.BufferFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.DynamicIndexBuffer" /> struct.
            </summary>
            <param name="memory">The initial index data with which to populate the buffer.</param>
            <param name="flags">Flags used to control buffer behavior.</param></member>
        <member name="M:SharpBgfx.DynamicIndexBuffer.Update(System.Int32,SharpBgfx.MemoryBlock)">
            <summary>
            Updates the data in the buffer.
            </summary>
            <param name="startIndex">Index of the first index to update.</param>
            <param name="memory">The new index data with which to fill the buffer.</param></member>
        <member name="M:SharpBgfx.DynamicIndexBuffer.Dispose">
            <summary>
            Releases the index buffer.
            </summary></member>
        <member name="M:SharpBgfx.DynamicIndexBuffer.Equals(SharpBgfx.DynamicIndexBuffer)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns></member>
        <member name="M:SharpBgfx.DynamicIndexBuffer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.DynamicIndexBuffer.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns></member>
        <member name="M:SharpBgfx.DynamicIndexBuffer.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns></member>
        <member name="M:SharpBgfx.DynamicIndexBuffer.op_Equality(SharpBgfx.DynamicIndexBuffer,SharpBgfx.DynamicIndexBuffer)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.DynamicIndexBuffer.op_Inequality(SharpBgfx.DynamicIndexBuffer,SharpBgfx.DynamicIndexBuffer)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="T:SharpBgfx.DynamicVertexBuffer">
            <summary>
            Represents a dynamically updateable vertex buffer.
            </summary></member>
        <member name="F:SharpBgfx.DynamicVertexBuffer.Invalid">
            <summary>
            Represents an invalid handle.
            </summary></member>
        <member name="M:SharpBgfx.DynamicVertexBuffer.#ctor(System.Int32,SharpBgfx.VertexLayout,SharpBgfx.BufferFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.DynamicVertexBuffer" /> struct.
            </summary>
            <param name="vertexCount">The number of vertices that fit in the buffer.</param>
            <param name="layout">The layout of the vertex data.</param>
            <param name="flags">Flags used to control buffer behavior.</param></member>
        <member name="M:SharpBgfx.DynamicVertexBuffer.#ctor(SharpBgfx.MemoryBlock,SharpBgfx.VertexLayout,SharpBgfx.BufferFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.DynamicVertexBuffer" /> struct.
            </summary>
            <param name="memory">The initial vertex data with which to populate the buffer.</param>
            <param name="layout">The layout of the vertex data.</param>
            <param name="flags">Flags used to control buffer behavior.</param></member>
        <member name="M:SharpBgfx.DynamicVertexBuffer.Update(System.Int32,SharpBgfx.MemoryBlock)">
            <summary>
            Updates the data in the buffer.
            </summary>
            <param name="startVertex">Index of the first vertex to update.</param>
            <param name="memory">The new vertex data with which to fill the buffer.</param></member>
        <member name="M:SharpBgfx.DynamicVertexBuffer.Dispose">
            <summary>
            Releases the vertex buffer.
            </summary></member>
        <member name="M:SharpBgfx.DynamicVertexBuffer.Equals(SharpBgfx.DynamicVertexBuffer)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns></member>
        <member name="M:SharpBgfx.DynamicVertexBuffer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.DynamicVertexBuffer.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns></member>
        <member name="M:SharpBgfx.DynamicVertexBuffer.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns></member>
        <member name="M:SharpBgfx.DynamicVertexBuffer.op_Equality(SharpBgfx.DynamicVertexBuffer,SharpBgfx.DynamicVertexBuffer)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.DynamicVertexBuffer.op_Inequality(SharpBgfx.DynamicVertexBuffer,SharpBgfx.DynamicVertexBuffer)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="T:SharpBgfx.RendererBackend">
            <summary>
            Specifies the supported rendering backend APIs.
            </summary></member>
        <member name="F:SharpBgfx.RendererBackend.Null">
            <summary>
            No backend given.
            </summary></member>
        <member name="F:SharpBgfx.RendererBackend.Direct3D9">
            <summary>
            Direct3D 9
            </summary></member>
        <member name="F:SharpBgfx.RendererBackend.Direct3D11">
            <summary>
            Direct3D 11
            </summary></member>
        <member name="F:SharpBgfx.RendererBackend.Direct3D12">
            <summary>
            Direct3D 12
            </summary></member>
        <member name="F:SharpBgfx.RendererBackend.Metal">
            <summary>
            Apple Metal.
            </summary></member>
        <member name="F:SharpBgfx.RendererBackend.OpenGLES">
            <summary>
            OpenGL ES
            </summary></member>
        <member name="F:SharpBgfx.RendererBackend.OpenGL">
            <summary>
            OpenGL
            </summary></member>
        <member name="F:SharpBgfx.RendererBackend.Vulkan">
            <summary>
            Vulkan
            </summary></member>
        <member name="F:SharpBgfx.RendererBackend.Default">
            <summary>
            Used during initialization; specifies that the library should
            pick the best renderer for the running hardware and OS.
            </summary></member>
        <member name="T:SharpBgfx.VertexAttributeUsage">
            <summary>
            Specifies vertex attribute usages.
            </summary></member>
        <member name="F:SharpBgfx.VertexAttributeUsage.Position">
            <summary>
            Position data.
            </summary></member>
        <member name="F:SharpBgfx.VertexAttributeUsage.Normal">
            <summary>
            Normals.
            </summary></member>
        <member name="F:SharpBgfx.VertexAttributeUsage.Tangent">
            <summary>
            Tangents.
            </summary></member>
        <member name="F:SharpBgfx.VertexAttributeUsage.Bitangent">
            <summary>
            Bitangents.
            </summary></member>
        <member name="F:SharpBgfx.VertexAttributeUsage.Color0">
            <summary>
            First color channel.
            </summary></member>
        <member name="F:SharpBgfx.VertexAttributeUsage.Color1">
            <summary>
            Second color channel.
            </summary></member>
        <member name="F:SharpBgfx.VertexAttributeUsage.Indices">
            <summary>
            Indices.
            </summary></member>
        <member name="F:SharpBgfx.VertexAttributeUsage.Weight">
            <summary>
            Animation weights.
            </summary></member>
        <member name="F:SharpBgfx.VertexAttributeUsage.TexCoord0">
            <summary>
            First texture coordinate channel (arbitrary data).
            </summary></member>
        <member name="F:SharpBgfx.VertexAttributeUsage.TexCoord1">
            <summary>
            Second texture coordinate channel (arbitrary data).
            </summary></member>
        <member name="F:SharpBgfx.VertexAttributeUsage.TexCoord2">
            <summary>
            Third texture coordinate channel (arbitrary data).
            </summary></member>
        <member name="F:SharpBgfx.VertexAttributeUsage.TexCoord3">
            <summary>
            Fourth texture coordinate channel (arbitrary data).
            </summary></member>
        <member name="F:SharpBgfx.VertexAttributeUsage.TexCoord4">
            <summary>
            Fifth texture coordinate channel (arbitrary data).
            </summary></member>
        <member name="F:SharpBgfx.VertexAttributeUsage.TexCoord5">
            <summary>
            Sixth texture coordinate channel (arbitrary data).
            </summary></member>
        <member name="F:SharpBgfx.VertexAttributeUsage.TexCoord6">
            <summary>
            Seventh texture coordinate channel (arbitrary data).
            </summary></member>
        <member name="F:SharpBgfx.VertexAttributeUsage.TexCoord7">
            <summary>
            Eighth texture coordinate channel (arbitrary data).
            </summary></member>
        <member name="T:SharpBgfx.VertexAttributeType">
            <summary>
            Specifies data types for vertex attributes.
            </summary></member>
        <member name="F:SharpBgfx.VertexAttributeType.UInt8">
            <summary>
            One-byte unsigned integer.
            </summary></member>
        <member name="F:SharpBgfx.VertexAttributeType.UInt10">
            <summary>
            10-bit unsigned integer.
            </summary>
            <remarks>
            Availability depends on Caps flags.
            </remarks></member>
        <member name="F:SharpBgfx.VertexAttributeType.Int16">
            <summary>
            Two-byte signed integer.
            </summary></member>
        <member name="F:SharpBgfx.VertexAttributeType.Half">
            <summary>
            Two-byte float.
            </summary>
            <remarks>
            Availability depends on Caps flags.
            </remarks></member>
        <member name="F:SharpBgfx.VertexAttributeType.Float">
            <summary>
            Four-byte float.
            </summary></member>
        <member name="T:SharpBgfx.TextureFormat">
            <summary>
            Specifies the format of a texture's data.
            </summary>
            <remarks>
            Check Caps flags for hardware format support.
            </remarks></member>
        <member name="F:SharpBgfx.TextureFormat.BC1">
            <summary>
            Block compression with three color channels, 1 bit alpha.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.BC2">
            <summary>
            Block compression with three color channels, 4 bits alpha.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.BC3">
            <summary>
            Block compression with three color channels, 8 bits alpha.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.BC4">
            <summary>
            Block compression for 1-channel color.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.BC5">
            <summary>
            Block compression for 2-channel color.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.BC6H">
            <summary>
            Block compression for three-channel HDR color.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.BC7">
            <summary>
            Highest quality block compression.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.ETC1">
            <summary>
            Original ETC block compression.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.ETC2">
            <summary>
            Improved ETC block compression (no alpha).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.ETC2A">
            <summary>
            Improved ETC block compression with full alpha.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.ETC2A1">
            <summary>
            Improved ETC block compression with 1-bit punchthrough alpha.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.PTC12">
            <summary>
            PVRTC1 compression (2 bits per pixel)
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.PTC14">
            <summary>
            PVRTC1 compression (4 bits per pixel)
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.PTC12A">
            <summary>
            PVRTC1 compression with alpha (2 bits per pixel)
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.PTC14A">
            <summary>
            PVRTC1 compression with alpha (4 bits per pixel)
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.PTC22">
            <summary>
            PVRTC2 compression with alpha (2 bits per pixel)
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.PTC24">
            <summary>
            PVRTC2 compression with alpha (4 bits per pixel)
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.Unknown">
            <summary>
            Unknown texture format.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.R1">
            <summary>
            1-bit single channel.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.A8">
            <summary>
            8-bit single channel (alpha).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.R8">
            <summary>
            8-bit single channel.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.R8I">
            <summary>
            8-bit single channel (integer).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.R8U">
            <summary>
            8-bit single channel (unsigned).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.R8S">
            <summary>
            8-bit single channel (signed).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.R16">
            <summary>
            16-bit single channel.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.R16I">
            <summary>
            16-bit single channel (integer).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.R16U">
            <summary>
            16-bit single channel (unsigned).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.R16F">
            <summary>
            16-bit single channel (float).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.R16S">
            <summary>
            16-bit single channel (signed).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.R32I">
            <summary>
            32-bit single channel (integer).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.R32U">
            <summary>
            32-bit single channel (unsigned).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.R32F">
            <summary>
            32-bit single channel (float).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RG8">
            <summary>
            8-bit two channel.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RG8I">
            <summary>
            8-bit two channel (integer).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RG8U">
            <summary>
            8-bit two channel (unsigned).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RG8S">
            <summary>
            8-bit two channel (signed).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RG16">
            <summary>
            16-bit two channel.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RG16I">
            <summary>
            16-bit two channel (integer).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RG16U">
            <summary>
            16-bit two channel (unsigned).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RG16F">
            <summary>
            16-bit two channel (float).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RG16S">
            <summary>
            16-bit two channel (signed).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RG32I">
            <summary>
            32-bit two channel (integer).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RG32U">
            <summary>
            32-bit two channel (unsigned).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RG32F">
            <summary>
            32-bit two channel (float).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RGB9E5F">
            <summary>
            9-bit three channel floating point with shared 5-bit exponent.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.BGRA8">
            <summary>
            8-bit BGRA color.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RGBA8">
            <summary>
            8-bit RGBA color.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RGBA8I">
            <summary>
            8-bit RGBA color (integer).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RGBA8U">
            <summary>
            8-bit RGBA color (unsigned).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RGBA8S">
            <summary>
            8-bit RGBA color (signed).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RGBA16">
            <summary>
            16-bit RGBA color.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RGBA16I">
            <summary>
            16-bit RGBA color (integer).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RGBA16U">
            <summary>
            16-bit RGBA color (unsigned).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RGBA16F">
            <summary>
            16-bit RGBA color (float).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RGBA16S">
            <summary>
            16-bit RGBA color (signed).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RGBA32I">
            <summary>
            32-bit RGBA color (integer).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RGBA32U">
            <summary>
            32-bit RGBA color (unsigned).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RGBA32F">
            <summary>
            32-bit RGBA color (float).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.R5G6B5">
            <summary>
            5-6-6 color.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RGBA4">
            <summary>
            4-bit RGBA color.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RGB5A1">
            <summary>
            5-bit RGB color with 1-bit alpha.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.RGB10A2">
            <summary>
            10-bit RGB color with 2-bit alpha.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.R11G11B10F">
            <summary>
            11-11-10 color (float).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.UnknownDepth">
            <summary>
            Unknown depth format.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.D16">
            <summary>
            16-bit depth.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.D24">
            <summary>
            24-bit depth.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.D24S8">
            <summary>
            24-bit depth, 8-bit stencil.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.D32">
            <summary>
            32-bit depth.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.D16F">
            <summary>
            16-bit depth (float).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.D24F">
            <summary>
            24-bit depth (float).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.D32F">
            <summary>
            32-bit depth (float).
            </summary></member>
        <member name="F:SharpBgfx.TextureFormat.D0S8">
            <summary>
            8-bit stencil.
            </summary></member>
        <member name="T:SharpBgfx.UniformType">
            <summary>
            Specifies the type of uniform data.
            </summary></member>
        <member name="F:SharpBgfx.UniformType.Int1">
            <summary>
            Single integer.
            </summary></member>
        <member name="F:SharpBgfx.UniformType.Vector4">
            <summary>
            4D vector.
            </summary></member>
        <member name="F:SharpBgfx.UniformType.Matrix3x3">
            <summary>
            3x3 matrix.
            </summary></member>
        <member name="F:SharpBgfx.UniformType.Matrix4x4">
            <summary>
            4x4 matrix.
            </summary></member>
        <member name="T:SharpBgfx.ResetFlags">
            <summary>
            Specifies various settings to change during a reset call.
            </summary></member>
        <member name="F:SharpBgfx.ResetFlags.None">
            <summary>
            No features to change.
            </summary></member>
        <member name="F:SharpBgfx.ResetFlags.Fullscreen">
            <summary>
            Not yet supported.
            </summary></member>
        <member name="F:SharpBgfx.ResetFlags.MSAA2x">
            <summary>
            Enable 2x multisampling.
            </summary></member>
        <member name="F:SharpBgfx.ResetFlags.MSAA4x">
            <summary>
            Enable 4x multisampling.
            </summary></member>
        <member name="F:SharpBgfx.ResetFlags.MSAA8x">
            <summary>
            Enable 8x multisampling.
            </summary></member>
        <member name="F:SharpBgfx.ResetFlags.MSAA16x">
            <summary>
            Enable 16x multisampling.
            </summary></member>
        <member name="F:SharpBgfx.ResetFlags.Vsync">
            <summary>
            Enable v-sync.
            </summary></member>
        <member name="F:SharpBgfx.ResetFlags.MaxAnisotropy">
            <summary>
            Use the maximum anisotropic filtering level available.
            </summary></member>
        <member name="F:SharpBgfx.ResetFlags.Capture">
            <summary>
            Begin screen capture.
            </summary></member>
        <member name="F:SharpBgfx.ResetFlags.HeadMountedDisplay">
            <summary>
            Enable head mounted display support.
            </summary></member>
        <member name="F:SharpBgfx.ResetFlags.HeadMountedDisplayDebug">
            <summary>
            Enable debugging for head mounted display rendering.
            </summary></member>
        <member name="F:SharpBgfx.ResetFlags.HeadMountedDisplayRecenter">
            <summary>
            Recenter the head mounted display.
            </summary></member>
        <member name="F:SharpBgfx.ResetFlags.FlushAfterRender">
            <summary>
            Flush all commands to the device after rendering.
            </summary></member>
        <member name="F:SharpBgfx.ResetFlags.FlipAfterRender">
            <summary>
            Flip the backbuffer immediately after rendering for reduced latency.
            Only useful when multithreading is disabled.
            </summary></member>
        <member name="F:SharpBgfx.ResetFlags.SrgbBackbuffer">
            <summary>
            Write data to the backbuffer in non-linear sRGB format.
            </summary></member>
        <member name="F:SharpBgfx.ResetFlags.HighDPI">
            <summary>
            Enable High-DPI rendering.
            </summary></member>
        <member name="F:SharpBgfx.ResetFlags.DepthClamp">
            <summary>
            Enables depth clamping.
            </summary></member>
        <member name="T:SharpBgfx.DebugFeatures">
            <summary>
            Specifies various debug options.
            </summary></member>
        <member name="F:SharpBgfx.DebugFeatures.None">
            <summary>
            Don't enable any debugging features.
            </summary></member>
        <member name="F:SharpBgfx.DebugFeatures.Wireframe">
            <summary>
            Force wireframe rendering.
            </summary></member>
        <member name="F:SharpBgfx.DebugFeatures.InfinitelyFastHardware">
            <summary>
            When set, all rendering calls are skipped. This is useful when profiling to
            find bottlenecks between the CPU and GPU.
            </summary></member>
        <member name="F:SharpBgfx.DebugFeatures.DisplayStatistics">
            <summary>
            Display internal statistics.
            </summary></member>
        <member name="F:SharpBgfx.DebugFeatures.DisplayText">
            <summary>
            Display debug text.
            </summary></member>
        <member name="T:SharpBgfx.ClearTargets">
            <summary>
            Specifies flags for clearing surfaces.
            </summary></member>
        <member name="F:SharpBgfx.ClearTargets.None">
            <summary>
            Don't clear anything.
            </summary></member>
        <member name="F:SharpBgfx.ClearTargets.Color">
            <summary>
            Clear the color channels.
            </summary></member>
        <member name="F:SharpBgfx.ClearTargets.Depth">
            <summary>
            Clear the depth buffer.
            </summary></member>
        <member name="F:SharpBgfx.ClearTargets.Stencil">
            <summary>
            Clear the stencil buffer.
            </summary></member>
        <member name="F:SharpBgfx.ClearTargets.DiscardColor0">
            <summary>
            Discard the first color framebuffer.
            </summary></member>
        <member name="F:SharpBgfx.ClearTargets.DiscardColor1">
            <summary>
            Discard the second color framebuffer.
            </summary></member>
        <member name="F:SharpBgfx.ClearTargets.DiscardColor2">
            <summary>
            Discard the third color framebuffer.
            </summary></member>
        <member name="F:SharpBgfx.ClearTargets.DiscardColor3">
            <summary>
            Discard the fourth color framebuffer.
            </summary></member>
        <member name="F:SharpBgfx.ClearTargets.DiscardColor4">
            <summary>
            Discard the fifth color framebuffer.
            </summary></member>
        <member name="F:SharpBgfx.ClearTargets.DiscardColor5">
            <summary>
            Discard the sixth color framebuffer.
            </summary></member>
        <member name="F:SharpBgfx.ClearTargets.DiscardColor6">
            <summary>
            Discard the seventh color framebuffer.
            </summary></member>
        <member name="F:SharpBgfx.ClearTargets.DiscardColor7">
            <summary>
            Discard the eighth color framebuffer.
            </summary></member>
        <member name="F:SharpBgfx.ClearTargets.DiscardDepth">
            <summary>
            Discard the depth buffer.
            </summary></member>
        <member name="F:SharpBgfx.ClearTargets.DiscardStencil">
            <summary>
            Discard the stencil buffer.
            </summary></member>
        <member name="T:SharpBgfx.DeviceFeatures">
            <summary>
            Specifies various capabilities supported by the rendering device.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.None">
            <summary>
            No extra features supported.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.TextureCompareLessEqual">
            <summary>
            Device supports "Less than or equal to" texture comparison mode.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.TextureCompareExtended">
            <summary>
            Device supports other texture comparison modes.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.TextureCompareAll">
            <summary>
            Device supports all texture comparison modes.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.Texture3D">
            <summary>
            Device supports 3D textures.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.VertexAttributeHalf">
            <summary>
            Device supports 16-bit floats as vertex attributes.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.VertexAttributeUInt10">
            <summary>
            UInt10 vertex attributes are supported.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.Instancing">
            <summary>
            Device supports instancing.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.RendererMultithreaded">
            <summary>
            Device supports multithreaded rendering.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.FragmentDepth">
            <summary>
            Fragment shaders can access depth values.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.BlendIndependent">
            <summary>
            Device supports independent blending of simultaneous render targets.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.Compute">
            <summary>
            Device supports compute shaders.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.FragmentOrdering">
            <summary>
            Device supports ordering of fragment output.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.SwapChain">
            <summary>
            Indicates whether the device can render to multiple swap chains.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.HeadMountedDisplay">
            <summary>
            Head mounted displays are supported.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.Index32">
            <summary>
            Device supports 32-bit indices.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.DrawIndirect">
            <summary>
            Device supports indirect drawing via GPU buffers.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.HighDPI">
            <summary>
            Device supports high-DPI rendering.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.TextureBlit">
            <summary>
            Device supports texture blits.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.TextureReadBack">
            <summary>
            Device supports reading back texture data.
            </summary></member>
        <member name="F:SharpBgfx.DeviceFeatures.OcclusionQuery">
            <summary>
            Device supports occlusion queries.
            </summary></member>
        <member name="T:SharpBgfx.TextureFormatSupport">
            <summary>
            Indicates the level of support for a specific texture format.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormatSupport.Unsupported">
            <summary>
            The format is unsupported.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormatSupport.Color2D">
            <summary>
            The format is supported for 2D color data and operations.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormatSupport.Srgb2D">
            <summary>
            The format is supported for 2D sRGB operations.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormatSupport.Emulated2D">
            <summary>
            The format is supported for 2D textures through library emulation.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormatSupport.Color3D">
            <summary>
            The format is supported for 3D color data and operations.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormatSupport.Srgb3D">
            <summary>
            The format is supported for 3D sRGB operations.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormatSupport.Emulated3D">
            <summary>
            The format is supported for 3D textures through library emulation.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormatSupport.ColorCube">
            <summary>
            The format is supported for cube color data and operations.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormatSupport.SrgbCube">
            <summary>
            The format is supported for cube sRGB operations.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormatSupport.EmulatedCube">
            <summary>
            The format is supported for cube textures through library emulation.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormatSupport.Vertex">
            <summary>
            The format is supported for vertex texturing.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormatSupport.Image">
            <summary>
            The format is supported for compute image operations.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormatSupport.Framebuffer">
            <summary>
            The format is supported for framebuffers.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormatSupport.FramebufferMSAA">
            <summary>
            The format is supported for MSAA framebuffers.
            </summary></member>
        <member name="F:SharpBgfx.TextureFormatSupport.MSAA">
            <summary>
            The format is supported for MSAA sampling.
            </summary></member>
        <member name="T:SharpBgfx.TextureFlags">
            <summary>
            Specifies various texture flags.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.None">
            <summary>
            No flags set.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.MirrorU">
            <summary>
            Mirror the texture in the U coordinate.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.ClampU">
            <summary>
            Clamp the texture in the U coordinate.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.BorderU">
            <summary>
            Use a border color for addresses outside the range in the U coordinate.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.MirrorV">
            <summary>
            Mirror the texture in the V coordinate.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.ClampV">
            <summary>
            Clamp the texture in the V coordinate.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.BorderV">
            <summary>
            Use a border color for addresses outside the range in the V coordinate.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.MirrorW">
            <summary>
            Mirror the texture in the W coordinate.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.ClampW">
            <summary>
            Clamp the texture in the W coordinate.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.BorderW">
            <summary>
            Use a border color for addresses outside the range in the W coordinate.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.MinFilterPoint">
            <summary>
            Use point filtering for texture minification.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.MinFilterAnisotropic">
            <summary>
            Use anisotropic filtering for texture minification.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.MagFilterPoint">
            <summary>
            Use point filtering for texture magnification.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.MagFilterAnisotropic">
            <summary>
            Use anisotropic filtering for texture magnification.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.MipFilterPoint">
            <summary>
            Use point filtering for texture mipmaps.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.RenderTarget">
            <summary>
            The texture will be used as a render target.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.RenderTargetMultisample2x">
            <summary>
            The render target texture support 2x multisampling.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.RenderTargetMultisample4x">
            <summary>
            The render target texture support 4x multisampling.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.RenderTargetMultisample8x">
            <summary>
            The render target texture support 8x multisampling.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.RenderTargetMultisample16x">
            <summary>
            The render target texture support 16x multisampling.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.RenderTargetWriteOnly">
            <summary>
            The texture is only writeable (render target).
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.CompareLess">
            <summary>
            Use a "less than" operator when comparing textures.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.CompareLessEqual">
            <summary>
            Use a "less than or equal" operator when comparing textures.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.CompareEqual">
            <summary>
            Use an equality operator when comparing textures.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.CompareGreaterEqual">
            <summary>
            Use a "greater than or equal" operator when comparing textures.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.CompareGreater">
            <summary>
            Use a "greater than" operator when comparing textures.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.CompareNotEqual">
            <summary>
            Use an inequality operator when comparing textures.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.CompareNever">
            <summary>
            Never compare two textures as equal.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.CompareAlways">
            <summary>
            Always compare two textures as equal.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.ComputeWrite">
            <summary>
            Texture is the target of compute shader writes.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.Srgb">
            <summary>
            Texture data is in non-linear sRGB format.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.BlitDestination">
            <summary>
            Texture can be used as the destination of a blit operation.
            </summary></member>
        <member name="F:SharpBgfx.TextureFlags.ReadBack">
            <summary>
            Texture data can be read back.
            </summary></member>
        <member name="T:SharpBgfx.ComputeBufferAccess">
            <summary>
            Describes access rights for a compute buffer.
            </summary></member>
        <member name="F:SharpBgfx.ComputeBufferAccess.Read">
            <summary>
            The buffer can only be read.
            </summary></member>
        <member name="F:SharpBgfx.ComputeBufferAccess.Write">
            <summary>
            The buffer can only be written to.
            </summary></member>
        <member name="F:SharpBgfx.ComputeBufferAccess.ReadWrite">
            <summary>
            The buffer can be read and written.
            </summary></member>
        <member name="T:SharpBgfx.CubeMapFace">
            <summary>
            Addresses a particular face of a cube map.
            </summary></member>
        <member name="F:SharpBgfx.CubeMapFace.Right">
            <summary>
            The right face.
            </summary></member>
        <member name="F:SharpBgfx.CubeMapFace.Left">
            <summary>
            The left face.
            </summary></member>
        <member name="F:SharpBgfx.CubeMapFace.Top">
            <summary>
            The top face.
            </summary></member>
        <member name="F:SharpBgfx.CubeMapFace.Bottom">
            <summary>
            The bottom face.
            </summary></member>
        <member name="F:SharpBgfx.CubeMapFace.Front">
            <summary>
            The front face.
            </summary></member>
        <member name="F:SharpBgfx.CubeMapFace.Back">
            <summary>
            The back face.
            </summary></member>
        <member name="T:SharpBgfx.Vendor">
            <summary>
            Specifies known vendor IDs.
            </summary></member>
        <member name="F:SharpBgfx.Vendor.None">
            <summary>
            No vendor specified.
            </summary></member>
        <member name="F:SharpBgfx.Vendor.SoftwareRasterizer">
            <summary>
            Special flag to use platform's software rasterizer, if available.
            </summary></member>
        <member name="F:SharpBgfx.Vendor.AMD">
            <summary>
            AMD
            </summary></member>
        <member name="F:SharpBgfx.Vendor.Intel">
            <summary>
            Intel
            </summary></member>
        <member name="F:SharpBgfx.Vendor.Nvidia">
            <summary>
            NVIDIA
            </summary></member>
        <member name="F:SharpBgfx.Vendor.Microsoft">
            <summary>
            Microsoft
            </summary></member>
        <member name="T:SharpBgfx.BackbufferRatio">
            <summary>
            Specifies scaling relative to the size of the backbuffer.
            </summary></member>
        <member name="F:SharpBgfx.BackbufferRatio.Equal">
            <summary>
            Surface is equal to the backbuffer size.
            </summary></member>
        <member name="F:SharpBgfx.BackbufferRatio.Half">
            <summary>
            Surface is half the backbuffer size.
            </summary></member>
        <member name="F:SharpBgfx.BackbufferRatio.Quater">
            <summary>
            Surface is a quater of the backbuffer size.
            </summary></member>
        <member name="F:SharpBgfx.BackbufferRatio.Eighth">
            <summary>
            Surface is an eighth of the backbuffer size.
            </summary></member>
        <member name="F:SharpBgfx.BackbufferRatio.Sixteenth">
            <summary>
            Surface is a sixteenth of the backbuffer size.
            </summary></member>
        <member name="F:SharpBgfx.BackbufferRatio.Double">
            <summary>
            Surface is double the backbuffer size.
            </summary></member>
        <member name="T:SharpBgfx.BufferFlags">
            <summary>
            Specifies various flags that control vertex and index buffer behavior.
            </summary></member>
        <member name="F:SharpBgfx.BufferFlags.None">
            <summary>
            No flags specified.
            </summary></member>
        <member name="F:SharpBgfx.BufferFlags.ComputeFormat8x1">
            <summary>
            Specifies the format of data in a compute buffer as being 8x1.
            </summary></member>
        <member name="F:SharpBgfx.BufferFlags.ComputeFormat8x2">
            <summary>
            Specifies the format of data in a compute buffer as being 8x2.
            </summary></member>
        <member name="F:SharpBgfx.BufferFlags.ComputeFormat8x4">
            <summary>
            Specifies the format of data in a compute buffer as being 8x4.
            </summary></member>
        <member name="F:SharpBgfx.BufferFlags.ComputeFormat16x1">
            <summary>
            Specifies the format of data in a compute buffer as being 16x1.
            </summary></member>
        <member name="F:SharpBgfx.BufferFlags.ComputeFormat16x2">
            <summary>
            Specifies the format of data in a compute buffer as being 16x2.
            </summary></member>
        <member name="F:SharpBgfx.BufferFlags.ComputeFormat16x4">
            <summary>
            Specifies the format of data in a compute buffer as being 16x4.
            </summary></member>
        <member name="F:SharpBgfx.BufferFlags.ComputeFormat32x1">
            <summary>
            Specifies the format of data in a compute buffer as being 32x1.
            </summary></member>
        <member name="F:SharpBgfx.BufferFlags.ComputeFormat32x2">
            <summary>
            Specifies the format of data in a compute buffer as being 32x2.
            </summary></member>
        <member name="F:SharpBgfx.BufferFlags.ComputeFormat32x4">
            <summary>
            Specifies the format of data in a compute buffer as being 32x4.
            </summary></member>
        <member name="F:SharpBgfx.BufferFlags.ComputeTypeUInt">
            <summary>
            Specifies the type of data in a compute buffer as being unsigned integers.
            </summary></member>
        <member name="F:SharpBgfx.BufferFlags.ComputeTypeInt">
            <summary>
            Specifies the type of data in a compute buffer as being signed integers.
            </summary></member>
        <member name="F:SharpBgfx.BufferFlags.ComputeTypeFloat">
            <summary>
            Specifies the type of data in a compute buffer as being floating point values.
            </summary></member>
        <member name="F:SharpBgfx.BufferFlags.ComputeRead">
            <summary>
            Buffer will be read by a compute shader.
            </summary></member>
        <member name="F:SharpBgfx.BufferFlags.ComputeWrite">
            <summary>
            Buffer will be written into by a compute shader. It cannot be accessed by the CPU.
            </summary></member>
        <member name="F:SharpBgfx.BufferFlags.DrawIndirect">
            <summary>
            Buffer is the source of indirect draw commands.
            </summary></member>
        <member name="F:SharpBgfx.BufferFlags.AllowResize">
            <summary>
            Buffer will resize on update if a different quantity of data is passed. If this flag is not set
            the data will be trimmed to fit in the existing buffer size. Effective only for dynamic buffers.
            </summary></member>
        <member name="F:SharpBgfx.BufferFlags.Index32">
            <summary>
            Buffer is using 32-bit indices. Useful only for index buffers.
            </summary></member>
        <member name="F:SharpBgfx.BufferFlags.ComputeReadWrite">
            <summary>
            Buffer will be read and written by a compute shader.
            </summary></member>
        <member name="T:SharpBgfx.ErrorType">
            <summary>
            Specifies various error types that can be reported by bgfx.
            </summary></member>
        <member name="F:SharpBgfx.ErrorType.DebugCheck">
            <summary>
            A debug check failed; the program can safely continue, but the issue should be investigated.
            </summary></member>
        <member name="F:SharpBgfx.ErrorType.MinimumRequiredSpecs">
            <summary>
            The user's hardware failed checks for the minimum required specs.
            </summary></member>
        <member name="F:SharpBgfx.ErrorType.InvalidShader">
            <summary>
            The program tried to compile an invalid shader.
            </summary></member>
        <member name="F:SharpBgfx.ErrorType.UnableToInitialize">
            <summary>
            An error occurred during bgfx library initialization.
            </summary></member>
        <member name="F:SharpBgfx.ErrorType.UnableToCreateTexture">
            <summary>
            Failed while trying to create a texture.
            </summary></member>
        <member name="F:SharpBgfx.ErrorType.DeviceLost">
            <summary>
            The graphics device was lost and the library was unable to recover.
            </summary></member>
        <member name="T:SharpBgfx.DebugColor">
            <summary>
            Specifies debug text colors.
            </summary></member>
        <member name="F:SharpBgfx.DebugColor.Transparent">
            <summary>
            Transparent.
            </summary></member>
        <member name="F:SharpBgfx.DebugColor.Red">
            <summary>
            Red.
            </summary></member>
        <member name="F:SharpBgfx.DebugColor.Green">
            <summary>
            Green.
            </summary></member>
        <member name="F:SharpBgfx.DebugColor.Yellow">
            <summary>
            Yellow.
            </summary></member>
        <member name="F:SharpBgfx.DebugColor.Blue">
            <summary>
            Blue.
            </summary></member>
        <member name="F:SharpBgfx.DebugColor.Purple">
            <summary>
            Purple.
            </summary></member>
        <member name="F:SharpBgfx.DebugColor.Cyan">
            <summary>
            Cyan.
            </summary></member>
        <member name="F:SharpBgfx.DebugColor.Gray">
            <summary>
            Gray.
            </summary></member>
        <member name="F:SharpBgfx.DebugColor.DarkGray">
            <summary>
            Dark gray.
            </summary></member>
        <member name="F:SharpBgfx.DebugColor.LightRed">
            <summary>
            Light red.
            </summary></member>
        <member name="F:SharpBgfx.DebugColor.LightGreen">
            <summary>
            Light green.
            </summary></member>
        <member name="F:SharpBgfx.DebugColor.LightYellow">
            <summary>
            Light yellow.
            </summary></member>
        <member name="F:SharpBgfx.DebugColor.LightBlue">
            <summary>
            Light blue.
            </summary></member>
        <member name="F:SharpBgfx.DebugColor.LightPurple">
            <summary>
            Light purple.
            </summary></member>
        <member name="F:SharpBgfx.DebugColor.LightCyan">
            <summary>
            Light cyan.
            </summary></member>
        <member name="F:SharpBgfx.DebugColor.White">
            <summary>
            White.
            </summary></member>
        <member name="T:SharpBgfx.OcclusionQueryResult">
            <summary>
            Specifies results of an occlusion query.
            </summary></member>
        <member name="F:SharpBgfx.OcclusionQueryResult.Invisible">
            <summary>
            Objects are invisible.
            </summary></member>
        <member name="F:SharpBgfx.OcclusionQueryResult.Visible">
            <summary>
            Objects are visible.
            </summary></member>
        <member name="F:SharpBgfx.OcclusionQueryResult.NoResult">
            <summary>
            Result is not ready or is unknown.
            </summary></member>
        <member name="T:SharpBgfx.RenderFrameResult">
            <summary>
            Specifies results of manually rendering a single frame.
            </summary></member>
        <member name="F:SharpBgfx.RenderFrameResult.NoContext">
            <summary>
            No device context has been created yet.
            </summary></member>
        <member name="F:SharpBgfx.RenderFrameResult.Render">
            <summary>
            The frame was rendered.
            </summary></member>
        <member name="F:SharpBgfx.RenderFrameResult.Exiting">
            <summary>
            Rendering is done; the program should exit.
            </summary></member>
        <member name="T:SharpBgfx.FrameBuffer">
            <summary>
            An aggregated frame buffer, with one or more attached texture surfaces.
            </summary></member>
        <member name="F:SharpBgfx.FrameBuffer.Invalid">
            <summary>
            Represents an invalid handle.
            </summary></member>
        <member name="M:SharpBgfx.FrameBuffer.#ctor(System.Int32,System.Int32,SharpBgfx.TextureFormat,SharpBgfx.TextureFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.FrameBuffer" /> struct.
            </summary>
            <param name="width">The width of the render target.</param>
            <param name="height">The height of the render target.</param>
            <param name="format">The format of the new surface.</param>
            <param name="flags">Texture sampling flags.</param></member>
        <member name="M:SharpBgfx.FrameBuffer.#ctor(SharpBgfx.BackbufferRatio,SharpBgfx.TextureFormat,SharpBgfx.TextureFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.FrameBuffer" /> struct.
            </summary>
            <param name="ratio">The amount to scale when the backbuffer resizes.</param>
            <param name="format">The format of the new surface.</param>
            <param name="flags">Texture sampling flags.</param></member>
        <member name="M:SharpBgfx.FrameBuffer.#ctor(SharpBgfx.Texture[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.FrameBuffer" /> struct.
            </summary>
            <param name="attachments">A set of attachments from which to build the frame buffer.</param>
            <param name="destroyTextures">if set to <c>true</c>, attached textures will be destroyed when the frame buffer is destroyed.</param></member>
        <member name="M:SharpBgfx.FrameBuffer.#ctor(System.IntPtr,System.Int32,System.Int32,SharpBgfx.TextureFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.FrameBuffer" /> struct.
            </summary>
            <param name="windowHandle">The OS window handle to which the frame buffer is attached.</param>
            <param name="width">The width of the render target.</param>
            <param name="height">The height of the render target.</param>
            <param name="depthFormat">A desired format for a depth buffer, if applicable.</param></member>
        <member name="M:SharpBgfx.FrameBuffer.Dispose">
            <summary>
            Releases the frame buffer.
            </summary></member>
        <member name="M:SharpBgfx.FrameBuffer.BlitTo(System.Byte,SharpBgfx.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Blits the contents of the framebuffer to a texture.
            </summary>
            <param name="viewId">The view in which the blit will be ordered.</param>
            <param name="dest">The destination texture.</param>
            <param name="destX">The destination X position.</param>
            <param name="destY">The destination Y position.</param>
            <param name="attachment">The frame buffer attachment from which to blit.</param>
            <param name="sourceX">The source X position.</param>
            <param name="sourceY">The source Y position.</param>
            <param name="width">The width of the region to blit.</param>
            <param name="height">The height of the region to blit.</param>
            <remarks>The destination texture must be created with the <see cref="F:SharpBgfx.TextureFlags.BlitDestination" /> flag.</remarks></member>
        <member name="M:SharpBgfx.FrameBuffer.BlitTo(System.Byte,SharpBgfx.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Blits the contents of the framebuffer to a texture.
            </summary>
            <param name="viewId">The view in which the blit will be ordered.</param>
            <param name="dest">The destination texture.</param>
            <param name="destMip">The destination mip level.</param>
            <param name="destX">The destination X position.</param>
            <param name="destY">The destination Y position.</param>
            <param name="destZ">The destination Z position.</param>
            <param name="attachment">The frame buffer attachment from which to blit.</param>
            <param name="sourceMip">The source mip level.</param>
            <param name="sourceX">The source X position.</param>
            <param name="sourceY">The source Y position.</param>
            <param name="sourceZ">The source Z position.</param>
            <param name="width">The width of the region to blit.</param>
            <param name="height">The height of the region to blit.</param>
            <param name="depth">The depth of the region to blit.</param>
            <remarks>The destination texture must be created with the <see cref="F:SharpBgfx.TextureFlags.BlitDestination" /> flag.</remarks></member>
        <member name="M:SharpBgfx.FrameBuffer.Read(System.Int32,System.IntPtr)">
            <summary>
            Reads the contents of the frame buffer and stores them in memory pointed to by <paramref name="data" />.
            </summary>
            <param name="attachment">The frame buffer attachment from which to read.</param>
            <param name="data">The destination for the read image data.</param>
            <remarks>The attachment must have been created with the <see cref="F:SharpBgfx.TextureFlags.ReadBack" /> flag.</remarks></member>
        <member name="M:SharpBgfx.FrameBuffer.Equals(SharpBgfx.FrameBuffer)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns></member>
        <member name="M:SharpBgfx.FrameBuffer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.FrameBuffer.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns></member>
        <member name="M:SharpBgfx.FrameBuffer.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns></member>
        <member name="M:SharpBgfx.FrameBuffer.op_Equality(SharpBgfx.FrameBuffer,SharpBgfx.FrameBuffer)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.FrameBuffer.op_Inequality(SharpBgfx.FrameBuffer,SharpBgfx.FrameBuffer)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="T:SharpBgfx.IndexBuffer">
            <summary>
            Represents a static index buffer.
            </summary></member>
        <member name="F:SharpBgfx.IndexBuffer.Invalid">
            <summary>
            Represents an invalid handle.
            </summary></member>
        <member name="M:SharpBgfx.IndexBuffer.#ctor(SharpBgfx.MemoryBlock,SharpBgfx.BufferFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.IndexBuffer" /> struct.
            </summary>
            <param name="memory">The 16-bit index data used to populate the buffer.</param>
            <param name="flags">Flags used to control buffer behavior.</param></member>
        <member name="M:SharpBgfx.IndexBuffer.Dispose">
            <summary>
            Releases the index buffer.
            </summary></member>
        <member name="M:SharpBgfx.IndexBuffer.Equals(SharpBgfx.IndexBuffer)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns></member>
        <member name="M:SharpBgfx.IndexBuffer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.IndexBuffer.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns></member>
        <member name="M:SharpBgfx.IndexBuffer.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns></member>
        <member name="M:SharpBgfx.IndexBuffer.op_Equality(SharpBgfx.IndexBuffer,SharpBgfx.IndexBuffer)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.IndexBuffer.op_Inequality(SharpBgfx.IndexBuffer,SharpBgfx.IndexBuffer)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="T:SharpBgfx.InstanceDataBuffer">
            <summary>
            Maintains a data buffer that contains instancing data.
            </summary></member>
        <member name="F:SharpBgfx.InstanceDataBuffer.Invalid">
            <summary>
            Represents an invalid handle.
            </summary></member>
        <member name="P:SharpBgfx.InstanceDataBuffer.Data">
            <summary>
            A pointer that can be filled with instance data.
            </summary></member>
        <member name="P:SharpBgfx.InstanceDataBuffer.Size">
            <summary>
            The size of the data buffer.
            </summary></member>
        <member name="M:SharpBgfx.InstanceDataBuffer.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.InstanceDataBuffer" /> struct.
            </summary>
            <param name="count">The number of elements in the buffer.</param>
            <param name="stride">The stride of each element.</param></member>
        <member name="M:SharpBgfx.InstanceDataBuffer.CheckAvailableSpace(System.Int32,System.Int32)">
            <summary>
            Checks for available space to allocate an instance buffer.
            </summary>
            <param name="count">The number of elements to allocate.</param>
            <param name="stride">The stride of each element.</param>
            <returns><c>true</c> if there is space available to allocate the buffer.</returns></member>
        <member name="M:SharpBgfx.InstanceDataBuffer.Equals(SharpBgfx.InstanceDataBuffer)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns></member>
        <member name="M:SharpBgfx.InstanceDataBuffer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.InstanceDataBuffer.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns></member>
        <member name="M:SharpBgfx.InstanceDataBuffer.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns></member>
        <member name="M:SharpBgfx.InstanceDataBuffer.op_Equality(SharpBgfx.InstanceDataBuffer,SharpBgfx.InstanceDataBuffer)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.InstanceDataBuffer.op_Inequality(SharpBgfx.InstanceDataBuffer,SharpBgfx.InstanceDataBuffer)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="T:SharpBgfx.ReleaseCallback">
            <summary>
            Delegate type for callback functions.
            </summary>
            <param name="userData">User-provided data to the original allocation call.</param></member>
        <member name="T:SharpBgfx.MemoryBlock">
            <summary>
            Represents a block of memory managed by the graphics API.
            </summary></member>
        <member name="F:SharpBgfx.MemoryBlock.Invalid">
            <summary>
            Represents an invalid handle.
            </summary></member>
        <member name="P:SharpBgfx.MemoryBlock.Data">
            <summary>
            The pointer to the raw data.
            </summary></member>
        <member name="P:SharpBgfx.MemoryBlock.Size">
            <summary>
            The size of the block, in bytes.
            </summary></member>
        <member name="M:SharpBgfx.MemoryBlock.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.MemoryBlock" /> struct.
            </summary>
            <param name="size">The size of the block, in bytes.</param></member>
        <member name="M:SharpBgfx.MemoryBlock.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.MemoryBlock" /> struct.
            </summary>
            <param name="data">A pointer to the initial data to copy into the new block.</param>
            <param name="size">The size of the block, in bytes.</param></member>
        <member name="M:SharpBgfx.MemoryBlock.FromArray``1(``0[])">
            <summary>
            Copies a managed array into a native graphics memory block.
            </summary>
            <typeparam name="T">The type of data in the array.</typeparam>
            <param name="data">The array to copy.</param>
            <returns>The native memory block containing the copied data.</returns></member>
        <member name="M:SharpBgfx.MemoryBlock.MakeRef``1(``0[])">
            <summary>
            Creates a reference to the given data.
            </summary>
            <typeparam name="T">The type of data in the array.</typeparam>
            <param name="data">The array to reference.</param>
            <returns>The native memory block referring to the data.</returns>
            <remarks>
            The array must not be modified for at least 2 rendered frames.
            </remarks></member>
        <member name="M:SharpBgfx.MemoryBlock.MakeRef(System.IntPtr,System.Int32,System.IntPtr,SharpBgfx.ReleaseCallback)">
            <summary>
            Makes a reference to the given memory block.
            </summary>
            <param name="data">A pointer to the memory.</param>
            <param name="size">The size of the memory block.</param>
            <param name="userData">Arbitrary user data passed to the release callback.</param>
            <param name="callback">A function that will be called when the data is ready to be released.</param>
            <returns>A new memory block referring to the given data.</returns>
            <remarks>
            The memory referred to by the returned memory block must not be modified
            or released until the callback fires.
            </remarks></member>
        <member name="M:SharpBgfx.MemoryBlock.Equals(SharpBgfx.MemoryBlock)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns></member>
        <member name="M:SharpBgfx.MemoryBlock.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.MemoryBlock.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns></member>
        <member name="M:SharpBgfx.MemoryBlock.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns></member>
        <member name="M:SharpBgfx.MemoryBlock.op_Equality(SharpBgfx.MemoryBlock,SharpBgfx.MemoryBlock)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.MemoryBlock.op_Inequality(SharpBgfx.MemoryBlock,SharpBgfx.MemoryBlock)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="T:SharpBgfx.OcclusionQuery">
            <summary>
            Represents an occlusion query.
            </summary></member>
        <member name="F:SharpBgfx.OcclusionQuery.Invalid">
            <summary>
            Represents an invalid handle.
            </summary></member>
        <member name="P:SharpBgfx.OcclusionQuery.Result">
            <summary>
            Gets the result of the query.
            </summary></member>
        <member name="M:SharpBgfx.OcclusionQuery.Create">
            <summary>
            Creates a new query.
            </summary>
            <returns>The new occlusion query.</returns></member>
        <member name="M:SharpBgfx.OcclusionQuery.Dispose">
            <summary>
            Releases the query.
            </summary></member>
        <member name="M:SharpBgfx.OcclusionQuery.SetCondition(System.Boolean)">
            <summary>
            Sets the condition for which the query should check.
            </summary>
            <param name="visible"><c>true</c> for visible; <c>false</c> for invisible.</param></member>
        <member name="M:SharpBgfx.OcclusionQuery.Equals(SharpBgfx.OcclusionQuery)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns></member>
        <member name="M:SharpBgfx.OcclusionQuery.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.OcclusionQuery.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns></member>
        <member name="M:SharpBgfx.OcclusionQuery.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns></member>
        <member name="M:SharpBgfx.OcclusionQuery.op_Equality(SharpBgfx.OcclusionQuery,SharpBgfx.OcclusionQuery)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.OcclusionQuery.op_Inequality(SharpBgfx.OcclusionQuery,SharpBgfx.OcclusionQuery)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="T:SharpBgfx.PlatformData">
            <summary>
            Contains platform-specific data used to hook into the bgfx library.
            </summary></member>
        <member name="F:SharpBgfx.PlatformData.DisplayType">
            <summary>
            EGL native display type.
            </summary></member>
        <member name="F:SharpBgfx.PlatformData.WindowHandle">
            <summary>
            Platform window handle.
            </summary></member>
        <member name="F:SharpBgfx.PlatformData.Context">
            <summary>
            Device context to use instead of letting the library create its own.
            </summary></member>
        <member name="F:SharpBgfx.PlatformData.Backbuffer">
            <summary>
            Backbuffer pointer to use instead of letting the library create its own.
            </summary></member>
        <member name="F:SharpBgfx.PlatformData.BackbufferDepthStencil">
            <summary>
            Depth-stencil pointer to use instead of letting the library create its own.
            </summary></member>
        <member name="T:SharpBgfx.InternalData">
            <summary>
            Exposes internal API data for interop scenarios.
            </summary></member>
        <member name="F:SharpBgfx.InternalData.Caps">
            <summary>
            Pointer to internal Bgfx capabilities structure. Use <see cref="M:SharpBgfx.Bgfx.GetCaps" /> instead.
            </summary></member>
        <member name="F:SharpBgfx.InternalData.Context">
            <summary>
            The underlying API's device context (OpenGL, Direct3D, etc).
            </summary></member>
        <member name="T:SharpBgfx.Program">
            <summary>
            Represents a compiled and linked shader program.
            </summary></member>
        <member name="F:SharpBgfx.Program.Invalid">
            <summary>
            Represents an invalid handle.
            </summary></member>
        <member name="M:SharpBgfx.Program.#ctor(SharpBgfx.Shader,SharpBgfx.Shader,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.Program" /> struct.
            </summary>
            <param name="vertexShader">The vertex shader.</param>
            <param name="fragmentShader">The fragment shader.</param>
            <param name="destroyShaders">if set to <c>true</c>, the shaders will be released after creating the program.</param></member>
        <member name="M:SharpBgfx.Program.#ctor(SharpBgfx.Shader,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.Program" /> struct.
            </summary>
            <param name="computeShader">The compute shader.</param>
            <param name="destroyShaders">if set to <c>true</c>, the compute shader will be released after creating the program.</param></member>
        <member name="M:SharpBgfx.Program.Dispose">
            <summary>
            Releases the program.
            </summary></member>
        <member name="M:SharpBgfx.Program.Equals(SharpBgfx.Program)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns></member>
        <member name="M:SharpBgfx.Program.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.Program.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns></member>
        <member name="M:SharpBgfx.Program.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns></member>
        <member name="M:SharpBgfx.Program.op_Equality(SharpBgfx.Program,SharpBgfx.Program)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.Program.op_Inequality(SharpBgfx.Program,SharpBgfx.Program)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="T:SharpBgfx.RenderState">
            <summary>
            Specifies state information used to configure rendering operations.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.None">
            <summary>
            No state bits set.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.ColorWrite">
            <summary>
            Enable writing color data to the framebuffer.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.AlphaWrite">
            <summary>
            Enable writing alpha data to the framebuffer.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.DepthWrite">
            <summary>
            Enable writing to the depth buffer.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.DepthTestLess">
            <summary>
            Use a "less than" comparison to pass the depth test.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.DepthTestLessEqual">
            <summary>
            Use a "less than or equal to" comparison to pass the depth test.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.DepthTestEqual">
            <summary>
            Pass the depth test if both values are equal.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.DepthTestGreaterEqual">
            <summary>
            Use a "greater than or equal to" comparison to pass the depth test.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.DepthTestGreater">
            <summary>
            Use a "greater than" comparison to pass the depth test.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.DepthTestNotEqual">
            <summary>
            Pass the depth test if both values are not equal.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.DepthTestNever">
            <summary>
            Never pass the depth test.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.DepthTestAlways">
            <summary>
            Always pass the depth test.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendZero">
            <summary>
            Use a value of 0 as an input to a blend equation.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendOne">
            <summary>
            Use a value of 1 as an input to a blend equation.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendSourceColor">
            <summary>
            Use the source pixel color as an input to a blend equation.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendInverseSourceColor">
            <summary>
            Use one minus the source pixel color as an input to a blend equation.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendSourceAlpha">
            <summary>
            Use the source pixel alpha as an input to a blend equation.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendInverseSourceAlpha">
            <summary>
            Use one minus the source pixel alpha as an input to a blend equation.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendDestinationAlpha">
            <summary>
            Use the destination pixel alpha as an input to a blend equation.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendInverseDestinationAlpha">
            <summary>
            Use one minus the destination pixel alpha as an input to a blend equation.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendDestinationColor">
            <summary>
            Use the destination pixel color as an input to a blend equation.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendInverseDestinationColor">
            <summary>
            Use one minus the destination pixel color as an input to a blend equation.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendSourceAlphaSaturate">
            <summary>
            Use the source pixel alpha (saturated) as an input to a blend equation.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendFactor">
            <summary>
            Use an application supplied blending factor as an input to a blend equation.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendInverseFactor">
            <summary>
            Use one minus an application supplied blending factor as an input to a blend equation.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendEquationAdd">
            <summary>
            Blend equation: A + B
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendEquationSub">
            <summary>
            Blend equation: B - A
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendEquationReverseSub">
            <summary>
            Blend equation: A - B
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendEquationMin">
            <summary>
            Blend equation: min(a, b)
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendEquationMax">
            <summary>
            Blend equation: max(a, b)
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendIndependent">
            <summary>
            Enable independent blending of simultaenous render targets.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.NoCulling">
            <summary>
            Don't perform culling of back faces.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.CullClockwise">
            <summary>
            Perform culling of clockwise faces.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.CullCounterclockwise">
            <summary>
            Perform culling of counter-clockwise faces.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.PrimitiveTriangles">
            <summary>
            Primitive topology: triangle list.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.PrimitiveTriangleStrip">
            <summary>
            Primitive topology: triangle strip.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.PrimitiveLines">
            <summary>
            Primitive topology: line list.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.PrimitiveLineStrip">
            <summary>
            Primitive topology: line strip.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.PrimitivePoints">
            <summary>
            Primitive topology: point list.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.Multisampling">
            <summary>
            Enable multisampling.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.Default">
            <summary>
            Provides a set of sane defaults.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendAdd">
            <summary>
            Predefined blend effect: additive blending.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendAlpha">
            <summary>
            Predefined blend effect: alpha blending.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendDarken">
            <summary>
            Predefined blend effect: "darken" blending.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendLighten">
            <summary>
            Predefined blend effect: "lighten" blending.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendMultiply">
            <summary>
            Predefined blend effect: multiplicative blending.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendNormal">
            <summary>
            Predefined blend effect: normal blending based on alpha.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendScreen">
            <summary>
            Predefined blend effect: "screen" blending.
            </summary></member>
        <member name="F:SharpBgfx.RenderState.BlendLinearBurn">
            <summary>
            Predefined blend effect: "linear burn" blending.
            </summary></member>
        <member name="M:SharpBgfx.RenderState.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.RenderState" /> struct.
            </summary>
            <param name="value">The integer value of the state.</param></member>
        <member name="M:SharpBgfx.RenderState.AlphaRef(System.Byte)">
            <summary>
            Encodes an alpha reference value in a render state.
            </summary>
            <param name="alpha">The alpha reference value.</param>
            <returns>The encoded render state.</returns></member>
        <member name="M:SharpBgfx.RenderState.PointSize(System.Byte)">
            <summary>
            Encodes a point size value in a render state.
            </summary>
            <param name="size">The point size.</param>
            <returns>The encoded render state.</returns></member>
        <member name="M:SharpBgfx.RenderState.BlendFunction(SharpBgfx.RenderState,SharpBgfx.RenderState)">
            <summary>
            Builds a render state for a blend function.
            </summary>
            <param name="source">The source blend operation.</param>
            <param name="destination">The destination blend operation.</param>
            <returns>The render state for the blend function.</returns></member>
        <member name="M:SharpBgfx.RenderState.BlendFunction(SharpBgfx.RenderState,SharpBgfx.RenderState,SharpBgfx.RenderState,SharpBgfx.RenderState)">
            <summary>
            Builds a render state for a blend function.
            </summary>
            <param name="sourceColor">The source color blend operation.</param>
            <param name="destinationColor">The destination color blend operation.</param>
            <param name="sourceAlpha">The source alpha blend operation.</param>
            <param name="destinationAlpha">The destination alpha blend operation.</param>
            <returns>
            The render state for the blend function.
            </returns></member>
        <member name="M:SharpBgfx.RenderState.BlendEquation(SharpBgfx.RenderState)">
            <summary>
            Builds a render state for a blend equation.
            </summary>
            <param name="equation">The equation.</param>
            <returns>
            The render state for the blend equation.
            </returns></member>
        <member name="M:SharpBgfx.RenderState.BlendEquation(SharpBgfx.RenderState,SharpBgfx.RenderState)">
            <summary>
            Builds a render state for a blend equation.
            </summary>
            <param name="sourceEquation">The source equation.</param>
            <param name="alphaEquation">The alpha equation.</param>
            <returns>
            The render state for the blend equation.
            </returns></member>
        <member name="M:SharpBgfx.RenderState.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns></member>
        <member name="M:SharpBgfx.RenderState.Equals(SharpBgfx.RenderState)">
            <summary>
            Determines whether the specific value is equal to this instance.
            </summary>
            <param name="other">The value to compare with this instance.</param>
            <returns><c>true</c> if the value is equal to this instance; otherwise, <c>false</c>.</returns></member>
        <member name="M:SharpBgfx.RenderState.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.RenderState.op_Equality(SharpBgfx.RenderState,SharpBgfx.RenderState)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.RenderState.op_Inequality(SharpBgfx.RenderState,SharpBgfx.RenderState)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.RenderState.op_Implicit(System.UInt64)~SharpBgfx.RenderState">
            <summary>
            Performs an implicit conversion from ulong.
            </summary>
            <param name="value">The value to convert.</param></member>
        <member name="M:SharpBgfx.RenderState.op_Explicit(SharpBgfx.RenderState)~System.UInt64">
            <summary>
            Performs an explicit conversion to ulong.
            </summary>
            <param name="state">The value to convert.</param></member>
        <member name="M:SharpBgfx.RenderState.op_BitwiseOr(SharpBgfx.RenderState,SharpBgfx.RenderState)">
            <summary>
            Implements the bitwise-or operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            The result of the operator.
            </returns></member>
        <member name="M:SharpBgfx.RenderState.op_BitwiseAnd(SharpBgfx.RenderState,SharpBgfx.RenderState)">
            <summary>
            Implements the bitwise-and operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            The result of the operator.
            </returns></member>
        <member name="M:SharpBgfx.RenderState.op_OnesComplement(SharpBgfx.RenderState)">
            <summary>
            Implements the bitwise-complement operator.
            </summary>
            <param name="state">The operand.</param>
            <returns>
            The result of the operator.
            </returns></member>
        <member name="M:SharpBgfx.RenderState.op_LeftShift(SharpBgfx.RenderState,System.Int32)">
            <summary>
            Implements the left shift operator.
            </summary>
            <param name="state">The value to shift.</param>
            <param name="amount">The amount to shift.</param>
            <returns>
            The result of the operator.
            </returns></member>
        <member name="M:SharpBgfx.RenderState.op_RightShift(SharpBgfx.RenderState,System.Int32)">
            <summary>
            Implements the right shift operator.
            </summary>
            <param name="state">The value to shift.</param>
            <param name="amount">The amount to shift.</param>
            <returns>
            The result of the operator.
            </returns></member>
        <member name="T:SharpBgfx.Shader">
            <summary>
            Represents a single compiled shader component.
            </summary></member>
        <member name="F:SharpBgfx.Shader.Invalid">
            <summary>
            Represents an invalid handle.
            </summary></member>
        <member name="P:SharpBgfx.Shader.Uniforms">
            <summary>
            The set of uniforms exposed by the shader.
            </summary></member>
        <member name="M:SharpBgfx.Shader.#ctor(SharpBgfx.MemoryBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.Shader" /> struct.
            </summary>
            <param name="memory">The compiled shader memory.</param></member>
        <member name="M:SharpBgfx.Shader.Dispose">
            <summary>
            Releases the shader.
            </summary></member>
        <member name="M:SharpBgfx.Shader.Equals(SharpBgfx.Shader)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns></member>
        <member name="M:SharpBgfx.Shader.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.Shader.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns></member>
        <member name="M:SharpBgfx.Shader.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns></member>
        <member name="M:SharpBgfx.Shader.op_Equality(SharpBgfx.Shader,SharpBgfx.Shader)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.Shader.op_Inequality(SharpBgfx.Shader,SharpBgfx.Shader)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="T:SharpBgfx.StencilFlags">
            <summary>
            Specifies state information used to configure rendering operations.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.None">
            <summary>
            No state bits set.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.TestLess">
            <summary>
            Perform a "less than" stencil test.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.TestLessEqual">
            <summary>
            Perform a "less than or equal" stencil test.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.TestEqual">
            <summary>
            Perform an equality stencil test.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.TestGreaterEqual">
            <summary>
            Perform a "greater than or equal" stencil test.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.TestGreater">
            <summary>
            Perform a "greater than" stencil test.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.TestNotEqual">
            <summary>
            Perform an inequality stencil test.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.TestNever">
            <summary>
            Never pass the stencil test.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.TestAlways">
            <summary>
            Always pass the stencil test.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.FailSZero">
            <summary>
            On failing the stencil test, zero out the stencil value.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.FailSKeep">
            <summary>
            On failing the stencil test, keep the old stencil value.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.FailSReplace">
            <summary>
            On failing the stencil test, replace the stencil value.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.FailSIncrement">
            <summary>
            On failing the stencil test, increment the stencil value.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.FailSIncrementSaturate">
            <summary>
            On failing the stencil test, increment the stencil value (with saturation).
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.FailSDecrement">
            <summary>
            On failing the stencil test, decrement the stencil value.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.FailSDecrementSaturate">
            <summary>
            On failing the stencil test, decrement the stencil value (with saturation).
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.FailSInvert">
            <summary>
            On failing the stencil test, invert the stencil value.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.FailZZero">
            <summary>
            On failing the stencil test, zero out the depth value.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.FailZKeep">
            <summary>
            On failing the stencil test, keep the depth value.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.FailZReplace">
            <summary>
            On failing the stencil test, replace the depth value.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.FailZIncrement">
            <summary>
            On failing the stencil test, increment the depth value.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.FailZIncrementSaturate">
            <summary>
            On failing the stencil test, increment the depth value (with saturation).
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.FailZDecrement">
            <summary>
            On failing the stencil test, decrement the depth value.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.FailZDecrementSaturate">
            <summary>
            On failing the stencil test, decrement the depth value (with saturation).
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.FailZInvert">
            <summary>
            On failing the stencil test, invert the depth value.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.PassZZero">
            <summary>
            On passing the stencil test, zero out the depth value.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.PassZKeep">
            <summary>
            On passing the stencil test, keep the old depth value.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.PassZReplace">
            <summary>
            On passing the stencil test, replace the depth value.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.PassZIncrement">
            <summary>
            On passing the stencil test, increment the depth value.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.PassZIncrementSaturate">
            <summary>
            On passing the stencil test, increment the depth value (with saturation).
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.PassZDecrement">
            <summary>
            On passing the stencil test, decrement the depth value.
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.PassZDecrementSaturate">
            <summary>
            On passing the stencil test, decrement the depth value (with saturation).
            </summary></member>
        <member name="F:SharpBgfx.StencilFlags.PassZInvert">
            <summary>
            On passing the stencil test, invert the depth value.
            </summary></member>
        <member name="M:SharpBgfx.StencilFlags.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.StencilFlags" /> struct.
            </summary>
            <param name="value">The integer value of the state.</param></member>
        <member name="M:SharpBgfx.StencilFlags.ReferenceValue(System.Byte)">
            <summary>
            Encodes a reference value in a stencil state.
            </summary>
            <param name="reference">The stencil reference value.</param>
            <returns>The encoded stencil state.</returns></member>
        <member name="M:SharpBgfx.StencilFlags.ReadMask(System.Byte)">
            <summary>
            Encodes a read mask in a stencil state.
            </summary>
            <param name="mask">The mask.</param>
            <returns>
            The encoded stencil state.
            </returns></member>
        <member name="M:SharpBgfx.StencilFlags.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns></member>
        <member name="M:SharpBgfx.StencilFlags.Equals(SharpBgfx.StencilFlags)">
            <summary>
            Determines whether the specific value is equal to this instance.
            </summary>
            <param name="other">The value to compare with this instance.</param>
            <returns><c>true</c> if the value is equal to this instance; otherwise, <c>false</c>.</returns></member>
        <member name="M:SharpBgfx.StencilFlags.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.StencilFlags.op_Equality(SharpBgfx.StencilFlags,SharpBgfx.StencilFlags)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.StencilFlags.op_Inequality(SharpBgfx.StencilFlags,SharpBgfx.StencilFlags)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.StencilFlags.op_Implicit(System.UInt32)~SharpBgfx.StencilFlags">
            <summary>
            Performs an implicit conversion from uint.
            </summary>
            <param name="value">The value to convert.</param></member>
        <member name="M:SharpBgfx.StencilFlags.op_Explicit(SharpBgfx.StencilFlags)~System.UInt32">
            <summary>
            Performs an explicit conversion to uint.
            </summary>
            <param name="state">The value to convert.</param></member>
        <member name="M:SharpBgfx.StencilFlags.op_BitwiseOr(SharpBgfx.StencilFlags,SharpBgfx.StencilFlags)">
            <summary>
            Implements the bitwise-or operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            The result of the operator.
            </returns></member>
        <member name="M:SharpBgfx.StencilFlags.op_BitwiseAnd(SharpBgfx.StencilFlags,SharpBgfx.StencilFlags)">
            <summary>
            Implements the bitwise-and operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            The result of the operator.
            </returns></member>
        <member name="M:SharpBgfx.StencilFlags.op_OnesComplement(SharpBgfx.StencilFlags)">
            <summary>
            Implements the bitwise-complement operator.
            </summary>
            <param name="state">The operand.</param>
            <returns>
            The result of the operator.
            </returns></member>
        <member name="M:SharpBgfx.StencilFlags.op_LeftShift(SharpBgfx.StencilFlags,System.Int32)">
            <summary>
            Implements the left shift operator.
            </summary>
            <param name="state">The value to shift.</param>
            <param name="amount">The amount to shift.</param>
            <returns>
            The result of the operator.
            </returns></member>
        <member name="M:SharpBgfx.StencilFlags.op_RightShift(SharpBgfx.StencilFlags,System.Int32)">
            <summary>
            Implements the right shift operator.
            </summary>
            <param name="state">The value to shift.</param>
            <param name="amount">The amount to shift.</param>
            <returns>
            The result of the operator.
            </returns></member>
        <member name="T:SharpBgfx.Texture">
            <summary>
            Represents a loaded texture.
            </summary></member>
        <member name="P:SharpBgfx.Texture.Width">
            <summary>
            The width of the texture.
            </summary></member>
        <member name="P:SharpBgfx.Texture.Height">
            <summary>
            The height of the texture.
            </summary></member>
        <member name="P:SharpBgfx.Texture.Depth">
            <summary>
            The depth of the texture, if 3D.
            </summary></member>
        <member name="P:SharpBgfx.Texture.IsCubeMap">
            <summary>
            Indicates whether the texture is a cubemap.
            </summary></member>
        <member name="P:SharpBgfx.Texture.MipLevels">
            <summary>
            The number of mip levels in the texture.
            </summary></member>
        <member name="P:SharpBgfx.Texture.BitsPerPixel">
            <summary>
            The number of bits per pixel.
            </summary></member>
        <member name="P:SharpBgfx.Texture.SizeInBytes">
            <summary>
            The size of the entire texture, in bytes.
            </summary></member>
        <member name="P:SharpBgfx.Texture.Format">
            <summary>
            The format of the image data.
            </summary></member>
        <member name="M:SharpBgfx.Texture.FromFile(SharpBgfx.MemoryBlock,SharpBgfx.TextureFlags,System.Int32)">
            <summary>
            Creates a new texture from a file loaded in memory.
            </summary>
            <param name="memory">The content of the file.</param>
            <param name="flags">Flags that control texture behavior.</param>
            <param name="skipMips">A number of top level mips to skip when parsing texture data.</param>
            <returns>The newly created texture.</returns>
            <remarks>
            This function supports textures in the following container formats:
            - DDS
            - KTX
            - PVR
            </remarks></member>
        <member name="M:SharpBgfx.Texture.Create2D(System.Int32,System.Int32,System.Int32,SharpBgfx.TextureFormat,SharpBgfx.TextureFlags,System.Nullable{SharpBgfx.MemoryBlock})">
            <summary>
            Creates a new 2D texture.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="mipCount">The number of mip levels.</param>
            <param name="format">The format of the texture data.</param>
            <param name="flags">Flags that control texture behavior.</param>
            <param name="memory">If not <c>null</c>, contains the texture's image data.</param>
            <returns>
            The newly created texture handle.
            </returns></member>
        <member name="M:SharpBgfx.Texture.Create2D(SharpBgfx.BackbufferRatio,System.Int32,SharpBgfx.TextureFormat,SharpBgfx.TextureFlags)">
            <summary>
            Creates a new 2D texture that scales with backbuffer size.
            </summary>
            <param name="ratio">The amount to scale when the backbuffer resizes.</param>
            <param name="mipCount">The number of mip levels.</param>
            <param name="format">The format of the texture data.</param>
            <param name="flags">Flags that control texture behavior.</param>
            <returns>
            The newly created texture handle.
            </returns></member>
        <member name="M:SharpBgfx.Texture.Create3D(System.Int32,System.Int32,System.Int32,System.Int32,SharpBgfx.TextureFormat,SharpBgfx.TextureFlags,System.Nullable{SharpBgfx.MemoryBlock})">
            <summary>
            Creates a new 3D texture.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <param name="mipCount">The number of mip levels.</param>
            <param name="format">The format of the texture data.</param>
            <param name="flags">Flags that control texture behavior.</param>
            <param name="memory">If not <c>null</c>, contains the texture's image data.</param>
            <returns>The newly created texture handle.</returns></member>
        <member name="M:SharpBgfx.Texture.CreateCube(System.Int32,System.Int32,SharpBgfx.TextureFormat,SharpBgfx.TextureFlags,System.Nullable{SharpBgfx.MemoryBlock})">
            <summary>
            Creates a new cube texture.
            </summary>
            <param name="size">The size of each cube face.</param>
            <param name="mipCount">The number of mip levels.</param>
            <param name="format">The format of the texture data.</param>
            <param name="flags">Flags that control texture behavior.</param>
            <param name="memory">If not <c>null</c>, contains the texture's image data.</param>
            <returns>
            The newly created texture handle.
            </returns></member>
        <member name="M:SharpBgfx.Texture.Dispose">
            <summary>
            Releases the texture.
            </summary></member>
        <member name="M:SharpBgfx.Texture.Update2D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpBgfx.MemoryBlock,System.Int32)">
            <summary>
            Updates the data in a 2D texture.
            </summary>
            <param name="mipLevel">The mip level.</param>
            <param name="x">The X coordinate of the rectangle to update.</param>
            <param name="y">The Y coordinate of the rectangle to update.</param>
            <param name="width">The width of the rectangle to update.</param>
            <param name="height">The height of the rectangle to update.</param>
            <param name="memory">The new image data.</param>
            <param name="pitch">The pitch of the image data.</param></member>
        <member name="M:SharpBgfx.Texture.Update3D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpBgfx.MemoryBlock)">
            <summary>
            Updates the data in a 3D texture.
            </summary>
            <param name="mipLevel">The mip level.</param>
            <param name="x">The X coordinate of the volume to update.</param>
            <param name="y">The Y coordinate of the volume to update.</param>
            <param name="z">The Z coordinate of the volume to update.</param>
            <param name="width">The width of the volume to update.</param>
            <param name="height">The height of the volume to update.</param>
            <param name="depth">The depth of the volume to update.</param>
            <param name="memory">The new image data.</param></member>
        <member name="M:SharpBgfx.Texture.UpdateCube(SharpBgfx.CubeMapFace,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SharpBgfx.MemoryBlock,System.Int32)">
            <summary>
            Updates the data in a cube texture.
            </summary>
            <param name="face">The cube map face to update.</param>
            <param name="mipLevel">The mip level.</param>
            <param name="x">The X coordinate of the rectangle to update.</param>
            <param name="y">The Y coordinate of the rectangle to update.</param>
            <param name="width">The width of the rectangle to update.</param>
            <param name="height">The height of the rectangle to update.</param>
            <param name="memory">The new image data.</param>
            <param name="pitch">The pitch of the image data.</param></member>
        <member name="M:SharpBgfx.Texture.BlitTo(System.Byte,SharpBgfx.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Blits the contents of the texture to another texture.
            </summary>
            <param name="viewId">The view in which the blit will be ordered.</param>
            <param name="dest">The destination texture.</param>
            <param name="destX">The destination X position.</param>
            <param name="destY">The destination Y position.</param>
            <param name="sourceX">The source X position.</param>
            <param name="sourceY">The source Y position.</param>
            <param name="width">The width of the region to blit.</param>
            <param name="height">The height of the region to blit.</param>
            <remarks>The destination texture must be created with the <see cref="F:SharpBgfx.TextureFlags.BlitDestination" /> flag.</remarks></member>
        <member name="M:SharpBgfx.Texture.BlitTo(System.Byte,SharpBgfx.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Blits the contents of the texture to another texture.
            </summary>
            <param name="viewId">The view in which the blit will be ordered.</param>
            <param name="dest">The destination texture.</param>
            <param name="destMip">The destination mip level.</param>
            <param name="destX">The destination X position.</param>
            <param name="destY">The destination Y position.</param>
            <param name="destZ">The destination Z position.</param>
            <param name="sourceMip">The source mip level.</param>
            <param name="sourceX">The source X position.</param>
            <param name="sourceY">The source Y position.</param>
            <param name="sourceZ">The source Z position.</param>
            <param name="width">The width of the region to blit.</param>
            <param name="height">The height of the region to blit.</param>
            <param name="depth">The depth of the region to blit.</param>
            <remarks>The destination texture must be created with the <see cref="F:SharpBgfx.TextureFlags.BlitDestination" /> flag.</remarks></member>
        <member name="M:SharpBgfx.Texture.Read(System.IntPtr)">
            <summary>
            Reads the contents of the texture and stores them in memory pointed to by <paramref name="data" />.
            </summary>
            <param name="data">The destination for the read image data.</param>
            <remarks>The texture must have been created with the <see cref="F:SharpBgfx.TextureFlags.ReadBack" /> flag.</remarks></member>
        <member name="M:SharpBgfx.Texture.OverrideInternal(System.IntPtr)">
            <summary>
            Override internal texture with externally created texture.
            </summary>
            <param name="ptr">The native API texture pointer.</param>
            <returns>
            Native API pointer to the texture. If result is <see cref="F:System.IntPtr.Zero" />, the texture is not yet
            created from the main thread.
            </returns></member>
        <member name="M:SharpBgfx.Texture.OverrideInternal(System.Int32,System.Int32,System.Int32,SharpBgfx.TextureFormat,SharpBgfx.TextureFlags)">
            <summary>
            Override internal texture by creating a new 2D texture.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="mipCount">The number of mip levels.</param>
            <param name="format">The format of the texture data.</param>
            <param name="flags">Flags that control texture behavior.</param>
            <returns>
            Native API pointer to the texture. If result is <see cref="F:System.IntPtr.Zero" />, the texture is not yet
            created from the main thread.
            </returns></member>
        <member name="M:SharpBgfx.Texture.Equals(SharpBgfx.Texture)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns></member>
        <member name="M:SharpBgfx.Texture.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.Texture.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns></member>
        <member name="M:SharpBgfx.Texture.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns></member>
        <member name="M:SharpBgfx.Texture.op_Equality(SharpBgfx.Texture,SharpBgfx.Texture)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.Texture.op_Inequality(SharpBgfx.Texture,SharpBgfx.Texture)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="T:SharpBgfx.TransientIndexBuffer">
            <summary>
            Maintains a transient index buffer.
            </summary>
            <remarks>
            The contents of the buffer are valid for the current frame only.
            You must call SetVertexBuffer with the buffer or a leak could occur.
            </remarks></member>
        <member name="F:SharpBgfx.TransientIndexBuffer.Invalid">
            <summary>
            Represents an invalid handle.
            </summary></member>
        <member name="P:SharpBgfx.TransientIndexBuffer.Data">
            <summary>
            A pointer that can be filled with index data.
            </summary></member>
        <member name="P:SharpBgfx.TransientIndexBuffer.Count">
            <summary>
            The size of the buffer.
            </summary></member>
        <member name="M:SharpBgfx.TransientIndexBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.TransientIndexBuffer" /> struct.
            </summary>
            <param name="indexCount">The number of 16-bit indices that fit in the buffer.</param></member>
        <member name="M:SharpBgfx.TransientIndexBuffer.CheckAvailableSpace(System.Int32)">
            <summary>
            Check if there is available space in the global transient index buffer.
            </summary>
            <param name="count">The number of 16-bit indices to allocate.</param>
            <returns><c>true</c> if there is sufficient space for the give number of indices.</returns></member>
        <member name="M:SharpBgfx.TransientIndexBuffer.Equals(SharpBgfx.TransientIndexBuffer)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns></member>
        <member name="M:SharpBgfx.TransientIndexBuffer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.TransientIndexBuffer.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns></member>
        <member name="M:SharpBgfx.TransientIndexBuffer.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns></member>
        <member name="M:SharpBgfx.TransientIndexBuffer.op_Equality(SharpBgfx.TransientIndexBuffer,SharpBgfx.TransientIndexBuffer)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.TransientIndexBuffer.op_Inequality(SharpBgfx.TransientIndexBuffer,SharpBgfx.TransientIndexBuffer)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="T:SharpBgfx.TransientVertexBuffer">
            <summary>
            Maintains a transient vertex buffer.
            </summary>
            <remarks>
            The contents of the buffer are valid for the current frame only.
            You must call SetVertexBuffer with the buffer or a leak could occur.
            </remarks></member>
        <member name="F:SharpBgfx.TransientVertexBuffer.Invalid">
            <summary>
            Represents an invalid handle.
            </summary></member>
        <member name="P:SharpBgfx.TransientVertexBuffer.Data">
            <summary>
            A pointer that can be filled with vertex data.
            </summary></member>
        <member name="P:SharpBgfx.TransientVertexBuffer.Count">
            <summary>
            The size of the buffer.
            </summary></member>
        <member name="M:SharpBgfx.TransientVertexBuffer.#ctor(System.Int32,SharpBgfx.VertexLayout)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.TransientVertexBuffer" /> struct.
            </summary>
            <param name="vertexCount">The number of vertices that fit in the buffer.</param>
            <param name="layout">The layout of the vertex data.</param></member>
        <member name="M:SharpBgfx.TransientVertexBuffer.CheckAvailableSpace(System.Int32,SharpBgfx.VertexLayout)">
            <summary>
            Check if there is available space in the global transient vertex buffer.
            </summary>
            <param name="count">The number of vertices to allocate.</param>
            <param name="layout">The layout of each vertex.</param>
            <returns>
            <c>true</c> if there is sufficient space for the give number of vertices.
            </returns></member>
        <member name="M:SharpBgfx.TransientVertexBuffer.Equals(SharpBgfx.TransientVertexBuffer)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns></member>
        <member name="M:SharpBgfx.TransientVertexBuffer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.TransientVertexBuffer.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns></member>
        <member name="M:SharpBgfx.TransientVertexBuffer.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns></member>
        <member name="M:SharpBgfx.TransientVertexBuffer.op_Equality(SharpBgfx.TransientVertexBuffer,SharpBgfx.TransientVertexBuffer)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.TransientVertexBuffer.op_Inequality(SharpBgfx.TransientVertexBuffer,SharpBgfx.TransientVertexBuffer)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="T:SharpBgfx.Uniform">
            <summary>
            Represents a shader uniform.
            </summary></member>
        <member name="F:SharpBgfx.Uniform.Invalid">
            <summary>
            Represents an invalid handle.
            </summary></member>
        <member name="M:SharpBgfx.Uniform.#ctor(System.String,SharpBgfx.UniformType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.Uniform" /> struct.
            </summary>
            <param name="name">The name of the uniform.</param>
            <param name="type">The type of data represented by the uniform.</param>
            <param name="arraySize">Size of the array, if the uniform is an array type.</param>
            <remarks>
            Predefined uniform names:
            u_viewRect vec4(x, y, width, height) - view rectangle for current view.
            u_viewTexel vec4 (1.0/width, 1.0/height, undef, undef) - inverse width and height
            u_view mat4 - view matrix
            u_invView mat4 - inverted view matrix
            u_proj mat4 - projection matrix
            u_invProj mat4 - inverted projection matrix
            u_viewProj mat4 - concatenated view projection matrix
            u_invViewProj mat4 - concatenated inverted view projection matrix
            u_model mat4[BGFX_CONFIG_MAX_BONES] - array of model matrices.
            u_modelView mat4 - concatenated model view matrix, only first model matrix from array is used.
            u_modelViewProj mat4 - concatenated model view projection matrix.
            u_alphaRef float - alpha reference value for alpha test.
            </remarks></member>
        <member name="M:SharpBgfx.Uniform.Dispose">
            <summary>
            Releases the uniform.
            </summary></member>
        <member name="M:SharpBgfx.Uniform.Equals(SharpBgfx.Uniform)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns></member>
        <member name="M:SharpBgfx.Uniform.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.Uniform.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns></member>
        <member name="M:SharpBgfx.Uniform.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns></member>
        <member name="M:SharpBgfx.Uniform.op_Equality(SharpBgfx.Uniform,SharpBgfx.Uniform)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.Uniform.op_Inequality(SharpBgfx.Uniform,SharpBgfx.Uniform)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="T:SharpBgfx.VertexBuffer">
            <summary>
            Represents a static vertex buffer.
            </summary></member>
        <member name="F:SharpBgfx.VertexBuffer.Invalid">
            <summary>
            Represents an invalid handle.
            </summary></member>
        <member name="M:SharpBgfx.VertexBuffer.#ctor(SharpBgfx.MemoryBlock,SharpBgfx.VertexLayout,SharpBgfx.BufferFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpBgfx.VertexBuffer" /> struct.
            </summary>
            <param name="memory">The vertex data with which to populate the buffer.</param>
            <param name="layout">The layout of the vertex data.</param>
            <param name="flags">Flags used to control buffer behavior.</param></member>
        <member name="M:SharpBgfx.VertexBuffer.Dispose">
            <summary>
            Releases the vertex buffer.
            </summary></member>
        <member name="M:SharpBgfx.VertexBuffer.Equals(SharpBgfx.VertexBuffer)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns></member>
        <member name="M:SharpBgfx.VertexBuffer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.VertexBuffer.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns></member>
        <member name="M:SharpBgfx.VertexBuffer.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns></member>
        <member name="M:SharpBgfx.VertexBuffer.op_Equality(SharpBgfx.VertexBuffer,SharpBgfx.VertexBuffer)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:SharpBgfx.VertexBuffer.op_Inequality(SharpBgfx.VertexBuffer,SharpBgfx.VertexBuffer)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns></member>
        <member name="T:SharpBgfx.VertexLayout">
            <summary>
            Describes the layout of data in a vertex stream.
            </summary></member>
        <member name="P:SharpBgfx.VertexLayout.Stride">
            <summary>
            The stride of a single vertex using this layout.
            </summary></member>
        <member name="M:SharpBgfx.VertexLayout.Begin(SharpBgfx.RendererBackend)">
            <summary>
            Starts a stream of vertex attribute additions to the layout.
            </summary>
            <param name="backend">The rendering backend with which to associate the attributes.</param>
            <returns>This instance, for use in a fluent API.</returns></member>
        <member name="M:SharpBgfx.VertexLayout.Add(SharpBgfx.VertexAttributeUsage,System.Int32,SharpBgfx.VertexAttributeType,System.Boolean,System.Boolean)">
            <summary>
            Starts a stream of vertex attribute additions to the layout.
            </summary>
            <param name="attribute">The kind of attribute to add.</param>
            <param name="count">The number of elements in the attribute (1, 2, 3, or 4).</param>
            <param name="type">The type of data described by the attribute.</param>
            <param name="normalized">if set to <c>true</c>, values will be normalized from a 0-255 range to 0.0 - 0.1 in the shader.</param>
            <param name="asInt">if set to <c>true</c>, the attribute is packaged as an integer in the shader.</param>
            <returns>
            This instance, for use in a fluent API.
            </returns></member>
        <member name="M:SharpBgfx.VertexLayout.Skip(System.Int32)">
            <summary>
            Skips the specified number of bytes in the vertex stream.
            </summary>
            <param name="count">The number of bytes to skip.</param>
            <returns>This instance, for use in a fluent API.</returns></member>
        <member name="M:SharpBgfx.VertexLayout.End">
            <summary>
            Marks the end of the vertex stream.
            </summary>
            <returns>This instance, for use in a fluent API.</returns></member>
        <member name="M:SharpBgfx.VertexLayout.GetOffset(SharpBgfx.VertexAttributeUsage)">
            <summary>
            Gets the byte offset of a particular attribute in the layout.
            </summary>
            <param name="attribute">The attribute for which to get the offset.</param>
            <returns>The offset of the attribute, in bytes.</returns></member>
        <member name="M:SharpBgfx.VertexLayout.HasAttribute(SharpBgfx.VertexAttributeUsage)">
            <summary>
            Determines whether the layout contains the given attribute.
            </summary>
            <param name="attribute">The attribute to check/</param>
            <returns><c>true</c> if the layout contains the attribute; otherwise, <c>false</c>.</returns></member>
    </members>
</doc>
